import{_ as e,c as a,a0 as n,o as l}from"./chunks/framework.V6wbqQ68.js";const b=JSON.parse('{"title":"箭头函数与普通函数的区别","description":"","frontmatter":{},"headers":[],"relativePath":"website/language/JavaScript/3.箭头函数与普通函数的区别.md","filePath":"website/language/JavaScript/3.箭头函数与普通函数的区别.md"}'),r={name:"website/language/JavaScript/3.箭头函数与普通函数的区别.md"};function i(s,t,d,c,g,o){return l(),a("div",null,t[0]||(t[0]=[n('<h1 id="箭头函数与普通函数的区别" tabindex="-1">箭头函数与普通函数的区别 <a class="header-anchor" href="#箭头函数与普通函数的区别" aria-label="Permalink to &quot;箭头函数与普通函数的区别&quot;">​</a></h1><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">语法格式</th><th style="text-align:center;">new 和原型(prototype)</th><th style="text-align:center;">arguments<br><br>super<br><br>new.target</th><th style="text-align:center;">this 指向</th><th style="text-align:center;">call，apply 和 bind</th></tr></thead><tbody><tr><td style="text-align:center;">普通函数</td><td style="text-align:center;">function(){}<br><br>函数声明<br><br>函数表达式</td><td style="text-align:center;">有</td><td style="text-align:center;">有</td><td style="text-align:center;">动态</td><td style="text-align:center;">修改 this 值</td></tr><tr><td style="text-align:center;">箭头函数</td><td style="text-align:center;">() =&gt; {}<br><br>函数表达式</td><td style="text-align:center;">没有</td><td style="text-align:center;">没有<br><br>可调用外围</td><td style="text-align:center;">箭头函数的 this 指向定义时，外层中第一个普通函数的 this</td><td style="text-align:center;">箭头函数中的 this 是在箭头函数定义时就决定的，而且不可修改的（call、apply、bind）</td></tr></tbody></table><p><strong>为什么需要箭头函数</strong></p><ul><li>消除函数二义性(函数的二义性：1，指令序列 2，构造器面向对象)</li><li>调用函数有两种方式：1，直接调用 比如 Date（）2，通过 new 关键字调用 new Date()</li><li>ES6 中引入了类是为了告诉使用者函数只能通过 new 调用</li><li>同理箭头函数就只能表达函数只有指令序列的作用，不能通过 new 调用</li></ul>',4)]))}const p=e(r,[["render",i]]);export{b as __pageData,p as default};
