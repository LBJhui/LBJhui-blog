import{_ as a,c as i,a0 as e,o as t}from"./chunks/framework.V6wbqQ68.js";const k=JSON.parse('{"title":"对象属性","description":"","frontmatter":{},"headers":[],"relativePath":"guides/language-basic/JavaScript/对象属性.md","filePath":"guides/language-basic/JavaScript/对象属性.md"}'),l={name:"guides/language-basic/JavaScript/对象属性.md"};function n(p,s,o,c,h,r){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="对象属性" tabindex="-1">对象属性 <a class="header-anchor" href="#对象属性" aria-label="Permalink to &quot;对象属性&quot;">​</a></h1><h2 id="静态属性和动态属性" tabindex="-1">静态属性和动态属性 <a class="header-anchor" href="#静态属性和动态属性" aria-label="Permalink to &quot;静态属性和动态属性&quot;">​</a></h2><p><strong>动态属性与静态属性的区别</strong></p><p>静态属性的访问：</p><ol><li>通过点符号(.)访问的属性是静态的</li><li>属性名是硬编码，且在编写代码时就已知</li><li>不能使用变量作为属性名</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[x] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [[GET]](obj, &#39;x&#39;, obj)</span></span></code></pre></div><p>动态属性访问：</p><ol><li>通过方括号访问的属性是动态的</li><li>属性名可以在运行时计算得出的。我们可以使用变量、字符串字面量或表达式</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[x] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [[GET]](obj, x是不是symbol ? x : String(x),obj)</span></span></code></pre></div><p>点表示法要求属性名必须是一个有效的 JavaScript 标识符</p><ul><li><code>Object.keys()</code>返回所有可枚举的常规属性数组</li><li><code>Object.getOwnPropertyNames()</code>返回对象实例的常规属性数组，不考虑属性的可枚举性一律返回</li><li><code>Object.getOwnPropertySymbols()</code>返回对象实例的符号属性数组。</li><li><code>Object.getOwnPropertyDescriptors()</code>会返回同时包含常规和符号属性描述符的对象。</li><li><code>Reflect.ownKeys()</code>会返回两种类型的键</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象自有可枚举的属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对象属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">symbol 属性不能被json序列化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">symbol 属性可以删除，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configurable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,12)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
