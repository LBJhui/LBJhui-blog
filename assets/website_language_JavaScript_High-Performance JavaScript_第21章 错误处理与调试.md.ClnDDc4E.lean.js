import{_ as n,c as h,a0 as i,j as a,e as t,o as e}from"./chunks/framework.V6wbqQ68.js";const g=JSON.parse('{"title":"第 21 章 错误处理与调试","description":"","frontmatter":{},"headers":[],"relativePath":"website/language/JavaScript/High-Performance JavaScript/第21章 错误处理与调试.md","filePath":"website/language/JavaScript/High-Performance JavaScript/第21章 错误处理与调试.md"}'),l={name:"website/language/JavaScript/High-Performance JavaScript/第21章 错误处理与调试.md"};function k(p,s,r,d,E,o){return e(),h("div",null,[s[1]||(s[1]=i(`<h1 id="第-21-章-错误处理与调试" tabindex="-1">第 21 章 错误处理与调试 <a class="header-anchor" href="#第-21-章-错误处理与调试" aria-label="Permalink to &quot;第 21 章 错误处理与调试&quot;">​</a></h1><h2 id="_21-1-浏览器错误报告" tabindex="-1">21.1 浏览器错误报告 <a class="header-anchor" href="#_21-1-浏览器错误报告" aria-label="Permalink to &quot;21.1 浏览器错误报告&quot;">​</a></h2><h3 id="_21-1-1-桌面控制台" tabindex="-1">21.1.1 桌面控制台 <a class="header-anchor" href="#_21-1-1-桌面控制台" aria-label="Permalink to &quot;21.1.1 桌面控制台&quot;">​</a></h3><p>所有现代桌面浏览器都会通过控制台暴露错误。</p><h3 id="_21-1-2-移动控制台" tabindex="-1">21.1.2 移动控制台 <a class="header-anchor" href="#_21-1-2-移动控制台" aria-label="Permalink to &quot;21.1.2 移动控制台&quot;">​</a></h3><p>Chrome 移动版和 Safari 的 iOS 版内置了实用工具，支持将设备连接到宿主操作系统中相同的浏览器。然后，就可以在对应的桌面浏览器中查看错误了。</p><h2 id="_21-2-错误处理" tabindex="-1">21.2 错误处理 <a class="header-anchor" href="#_21-2-错误处理" aria-label="Permalink to &quot;21.2 错误处理&quot;">​</a></h2><h3 id="_21-2-1-try-catch-语句" tabindex="-1">21.2.1 try/catch 语句 <a class="header-anchor" href="#_21-2-1-try-catch-语句" aria-label="Permalink to &quot;21.2.1 try/catch 语句&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someNonexistentFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error.message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果 <code>try</code> 块中有代码发生错误，代码会立即退出执行，并跳到 <code>catch</code> 块中。<code>catch</code> 块此时接收到一个对象，该对象包含发生错误的相关信息。与其他语言不同，即使在 <code>catch</code> 块中不使用错误对象，也必须为它定义名称。错误对象中暴露的实际信息因浏览器而异，但至少包含保存错误消息的 <code>message</code> 属性。ECMA-262 也指定了定义错误类型的 <code>name</code> 属性，目前所有浏览器中都有这个属性。</p><h4 id="_1-finally-子句" tabindex="-1">1．finally 子句 <a class="header-anchor" href="#_1-finally-子句" aria-label="Permalink to &quot;1．finally 子句&quot;">​</a></h4><p><code>try/catch</code> 语句中可选的 <code>finally</code> 子句始终运行。如果 <code>try</code> 块中的代码运行完，则接着执行 <code>finally</code> 块中的代码。如果出错并执行 <code>catch</code> 块中的代码，则 <code>finally</code> 块中的代码仍执行。<code>try</code> 或 <code>catch</code> 块无法阻止 <code>finally</code> 块执行，包括 <code>return</code> 语句。</p><h4 id="_2-错误类型" tabindex="-1">2．错误类型 <a class="header-anchor" href="#_2-错误类型" aria-label="Permalink to &quot;2．错误类型&quot;">​</a></h4><p>ECMA-262 定义了以下 8 种错误类型：</p><p>❑ Error<br> ❑ InternalError<br> ❑ EvalError<br> ❑ RangeError<br> ❑ ReferenceError<br> ❑ SyntaxError<br> ❑ TypeError<br> ❑ URIError</p><p>Error 是基类型，其他错误类型继承该类型。因此，所有错误类型都共享相同的属性（所有错误对象上的方法都是这个默认类型定义的方法）​。浏览器很少会抛出 Error 类型的错误，该类型主要用于开发者抛出自定义错误。</p><p>InternalError 类型的错误会在底层 JavaScript 引擎抛出异常时由浏览器抛出。例如，递归过多导致了栈溢出。这个类型并不是代码中通常要处理的错误，如果真发生了这种错误，很可能代码哪里弄错了或者有危险了。</p><p>EvalError 类型的错误会在使用 eval()函数发生异常时抛出。ECMA-262 规定，​“如果 eval 属性没有被直接调用（即没有将其名称作为一个 Identifier，也就是 CallExpression 中的 MemberExpression）​，或者如果 eval 属性被赋值”​，就会抛出该错误。基本上，只要不把 eval()当成函数调用就会报告该错误：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出EvalError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出EvalError</span></span></code></pre></div><p>RangeError 错误会在数值越界时抛出。</p><p>ReferenceError 会在找不到对象时发生。​（这就是著名的&quot;object expected&quot;浏览器错误的原因。​）这种错误经常是由访问不存在的变量而导致的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在x没有声明时会抛出ReferenceError</span></span></code></pre></div><p>SyntaxError 经常在给 eval()传入的字符串包含 JavaScript 语法错误时发生。</p><p>TypeError 在 JavaScript 中很常见，主要发生在变量不是预期类型，或者访问不存在的方法时。很多原因可能导致这种错误，尤其是在使用类型特定的操作而变量类型不对时。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出TypeError</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出TypeError</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出TypeError</span></span></code></pre></div><p>URIError，只会在使用 <code>encodeURI()</code>或 <code>decodeURI()</code>但传入了格式错误的 URI 时发生。</p><h4 id="_3-try-catch-的用法" tabindex="-1">3．try/catch 的用法 <a class="header-anchor" href="#_3-try-catch-的用法" aria-label="Permalink to &quot;3．try/catch 的用法&quot;">​</a></h4><h3 id="_21-2-2-抛出错误" tabindex="-1">21.2.2 抛出错误 <a class="header-anchor" href="#_21-2-2-抛出错误" aria-label="Permalink to &quot;21.2.2 抛出错误&quot;">​</a></h3><p>与 <code>try/catch</code> 语句对应的一个机制是 <code>throw</code> 操作符，用于在任何时候抛出自定义错误。<code>throw</code> 操作符必须有一个值，但值的类型不限。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12345</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello world! &#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JavaScript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Something bad happened.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I don&#39;t like your syntax.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InternalError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I can&#39;t do that, Dave.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;What type of variable do you take me for? &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RangeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sorry, you just don&#39;t have the range.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EvalError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;That doesn&#39;t evaluate.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URIError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Uri, is that you? &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReferenceError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You didn&#39;t cite your references properly.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CustomError&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>创建自定义错误类型时，需要提供 <code>name</code> 属性和 <code>message</code> 属性。</p><h4 id="_1-何时抛出错误" tabindex="-1">1．何时抛出错误 <a class="header-anchor" href="#_1-何时抛出错误" aria-label="Permalink to &quot;1．何时抛出错误&quot;">​</a></h4><h4 id="_2-抛出错误与-try-catch" tabindex="-1">2．抛出错误与 try/catch <a class="header-anchor" href="#_2-抛出错误与-try-catch" aria-label="Permalink to &quot;2．抛出错误与 try/catch&quot;">​</a></h4><p>捕获错误的目的是阻止浏览器以其默认方式响应；抛出错误的目的是为错误提供有关其发生原因的说明。</p><h3 id="_21-2-3-error-事件" tabindex="-1">21.2.3 error 事件 <a class="header-anchor" href="#_21-2-3-error-事件" aria-label="Permalink to &quot;21.2.3 error 事件&quot;">​</a></h3><p>任何没有被 <code>try/catch</code> 语句处理的错误都会在 <code>window</code> 对象上触发 <code>error</code> 事件。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可以返回 false 来阻止浏览器默认报告错误的行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>图片也支持 <code>error</code> 事件。任何时候，如果图片 <code>src</code> 属性中的 URL 没有返回可识别的图片格式，就会触发 <code>error</code> 事件。这个事件遵循 DOM 格式，返回一个以图片为目标的 <code>event</code> 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Image loaded! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Image not loaded! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;doesnotexist.gif&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不存在，资源会加载失败</span></span></code></pre></div><h3 id="_21-2-4-错误处理策略" tabindex="-1">21.2.4 错误处理策略 <a class="header-anchor" href="#_21-2-4-错误处理策略" aria-label="Permalink to &quot;21.2.4 错误处理策略&quot;">​</a></h3><h3 id="_21-2-5-识别错误" tabindex="-1">21.2.5 识别错误 <a class="header-anchor" href="#_21-2-5-识别错误" aria-label="Permalink to &quot;21.2.5 识别错误&quot;">​</a></h3><p>错误处理非常重要的部分是首先识别错误可能会在代码中的什么地方发生。因为 JavaScript 是松散类型的，不会验证函数参数，所以很多错误只有在代码真正运行起来时才会出现。通常，需要注意 3 类错误：</p><p>❑ 类型转换错误 <br> ❑ 数据类型错误 <br> ❑ 通信错误</p><h4 id="_1-静态代码分析器" tabindex="-1">1．静态代码分析器 <a class="header-anchor" href="#_1-静态代码分析器" aria-label="Permalink to &quot;1．静态代码分析器&quot;">​</a></h4><h4 id="_2-类型转换错误" tabindex="-1">2．类型转换错误 <a class="header-anchor" href="#_2-类型转换错误" aria-label="Permalink to &quot;2．类型转换错误&quot;">​</a></h4><h4 id="_3-数据类型错误" tabindex="-1">3．数据类型错误 <a class="header-anchor" href="#_3-数据类型错误" aria-label="Permalink to &quot;3．数据类型错误&quot;">​</a></h4><h4 id="_4-通信错误" tabindex="-1">4．通信错误 <a class="header-anchor" href="#_4-通信错误" aria-label="Permalink to &quot;4．通信错误&quot;">​</a></h4><p>第一种错误是 URL 格式或发送数据的格式不正确。通常，在把数据发送到服务器之前没有用 <code>encodeURIComponent()</code>编码，会导致这种错误。</p><p>在服务器响应非预期值时也会发生通信错误。在动态加载脚本或样式时，请求的资源有可能不可用。有些浏览器在没有返回预期资源时会静默失败，而其他浏览器则会报告错误。不过，在动态加载资源的情况下出错，是不太好做错误处理的。有时候，使用 Ajax 通信可能会提供关于错误条件的更多信息。</p><h3 id="_21-2-6-区分重大与非重大错误" tabindex="-1">21.2.6 区分重大与非重大错误 <a class="header-anchor" href="#_21-2-6-区分重大与非重大错误" aria-label="Permalink to &quot;21.2.6 区分重大与非重大错误&quot;">​</a></h3><h3 id="_21-2-7-把错误记录到服务器中" tabindex="-1">21.2.7 把错误记录到服务器中 <a class="header-anchor" href="#_21-2-7-把错误记录到服务器中" aria-label="Permalink to &quot;21.2.7 把错误记录到服务器中&quot;">​</a></h3><h2 id="_21-3-调试技术" tabindex="-1">21.3 调试技术 <a class="header-anchor" href="#_21-3-调试技术" aria-label="Permalink to &quot;21.3 调试技术&quot;">​</a></h2><h3 id="_21-3-1-把消息记录到控制台" tabindex="-1">21.3.1 把消息记录到控制台 <a class="header-anchor" href="#_21-3-1-把消息记录到控制台" aria-label="Permalink to &quot;21.3.1 把消息记录到控制台&quot;">​</a></h3>`,53)),a("p",null,[s[0]||(s[0]=a("a",{href:"./../4.console命令以及用法"},"console 命令以及用法",-1)),t("",!0)]),s[2]||(s[2]=i(`<h3 id="_21-3-2-理解控制台运行时" tabindex="-1">21.3.2 理解控制台运行时 <a class="header-anchor" href="#_21-3-2-理解控制台运行时" aria-label="Permalink to &quot;21.3.2 理解控制台运行时&quot;">​</a></h3><h3 id="_21-3-3-使用-javascript-调试器" tabindex="-1">21.3.3 使用 JavaScript 调试器 <a class="header-anchor" href="#_21-3-3-使用-javascript-调试器" aria-label="Permalink to &quot;21.3.3 使用 JavaScript 调试器&quot;">​</a></h3><p>debugger</p><h3 id="_21-3-4-在页面中打印消息" tabindex="-1">21.3.4 在页面中打印消息 <a class="header-anchor" href="#_21-3-4-在页面中打印消息" aria-label="Permalink to &quot;21.3.4 在页面中打印消息&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这个函数的词法作用域会使用这个实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 而不是window.console</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> console</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;debuginfo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (console </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;debuginfo&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#dedede&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1px solid silver&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.padding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;5px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;400px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;absolute&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.style.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;p&gt; \${message}&lt;/p&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_21-3-5-补充控制台方法" tabindex="-1">21.3.5 补充控制台方法 <a class="header-anchor" href="#_21-3-5-补充控制台方法" aria-label="Permalink to &quot;21.3.5 补充控制台方法&quot;">​</a></h3><p><code>console</code> 是一个全局对象，可以为这个对象添加方法，也可以用自定义的函数重写已有的方法，这样无论在哪里用到的日志打印方法，都会按照自定义的方式行事。</p><h3 id="_21-3-6-抛出错误" tabindex="-1">21.3.6 抛出错误 <a class="header-anchor" href="#_21-3-6-抛出错误" aria-label="Permalink to &quot;21.3.6 抛出错误&quot;">​</a></h3><p>自定义错误通常使用 <code>assert()</code>函数抛出错误。这个函数接收一个应该为 <code>true</code> 的条件，并在条件为 <code>false</code> 时抛出错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(typeofnum1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typeofnum2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;divide(): Both arguments must be numbers.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_21-4-旧版-ie-的常见错误" tabindex="-1">21.4 旧版 IE 的常见错误 <a class="header-anchor" href="#_21-4-旧版-ie-的常见错误" aria-label="Permalink to &quot;21.4 旧版 IE 的常见错误&quot;">​</a></h2><h3 id="_21-4-1-无效字符" tabindex="-1">21.4.1 无效字符 <a class="header-anchor" href="#_21-4-1-无效字符" aria-label="Permalink to &quot;21.4.1 无效字符&quot;">​</a></h3><h3 id="_21-4-2-未找到成员" tabindex="-1">21.4.2 未找到成员 <a class="header-anchor" href="#_21-4-2-未找到成员" aria-label="Permalink to &quot;21.4.2 未找到成员&quot;">​</a></h3><h3 id="_21-4-3-未知运行时错误" tabindex="-1">21.4.3 未知运行时错误 <a class="header-anchor" href="#_21-4-3-未知运行时错误" aria-label="Permalink to &quot;21.4.3 未知运行时错误&quot;">​</a></h3><h3 id="_21-4-4-语法错误" tabindex="-1">21.4.4 语法错误 <a class="header-anchor" href="#_21-4-4-语法错误" aria-label="Permalink to &quot;21.4.4 语法错误&quot;">​</a></h3><h3 id="_21-4-5-系统找不到指定资源" tabindex="-1">21.4.5 系统找不到指定资源 <a class="header-anchor" href="#_21-4-5-系统找不到指定资源" aria-label="Permalink to &quot;21.4.5 系统找不到指定资源&quot;">​</a></h3>`,16))])}const y=n(l,[["render",k]]);export{g as __pageData,y as default};
