import{_ as i,c as a,a0 as l,o as n}from"./chunks/framework.V6wbqQ68.js";const E=JSON.parse('{"title":"深入理解 BFC（块级格式化上下文）","description":"","frontmatter":{},"headers":[],"relativePath":"guides/language-basic/CSS/5.BFC.md","filePath":"guides/language-basic/CSS/5.BFC.md"}'),t={name:"guides/language-basic/CSS/5.BFC.md"};function e(h,s,p,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="深入理解-bfc-块级格式化上下文" tabindex="-1">深入理解 BFC（块级格式化上下文） <a class="header-anchor" href="#深入理解-bfc-块级格式化上下文" aria-label="Permalink to &quot;深入理解 BFC（块级格式化上下文）&quot;">​</a></h1><p>在前端开发中，BFC（Block Formatting Context，块级格式化上下文）是一个非常重要的概念。它对于理解网页布局、解决一些常见的布局问题起着关键作用。本文将深入探讨 BFC 的概念、触发条件以及实际应用。</p><h2 id="一、什么是-bfc" tabindex="-1">一、什么是 BFC？ <a class="header-anchor" href="#一、什么是-bfc" aria-label="Permalink to &quot;一、什么是 BFC？&quot;">​</a></h2><p>BFC 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。简单来说，BFC 是一个独立的渲染区域，内部的元素布局不会影响外部元素，外部元素的布局也不会影响内部元素。</p><h2 id="二、bfc-规则" tabindex="-1">二、BFC 规则 <a class="header-anchor" href="#二、bfc-规则" aria-label="Permalink to &quot;二、BFC 规则&quot;">​</a></h2><ul><li>内部盒子会在垂直方向排列</li><li>垂直方向的距离由 margin 决定，属于<strong>同一个 BFC 内部</strong>的两个相邻的标签外边距会发生重叠</li><li>BFC 就是页面上的一个隔离的独立容器，容器里的标签不会影响到外部标签</li><li>计算 BFC 的高度时，考虑 BFC 所包含的所有子元素，连浮动元素也要参与计算。</li><li>当元素不是 BFC 的子元素时，浮动元素高度不参与 BFC 计算（常见的盒子塌陷问题）</li><li>每个盒子（块盒与行盒）的 margin box 的左边，与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC 的区域不会与 float box 重叠。</li></ul><p><strong>为什么要了解 BFC？</strong></p><p>了解 BFC 有以下几个重要原因：</p><ol><li>解决布局问题：BFC 可以帮助解决一些常见的布局问题，如 margin 合并、浮动元素导致的父元素高度塌陷等。</li><li>提高布局的稳定性：通过创建 BFC，可以使元素的布局更加稳定，不受外部因素的影响。</li><li>更好地控制页面布局：掌握 BFC 的概念和触发条件，可以更好地控制页面的布局，实现更加复杂的设计效果。</li></ol><h2 id="三、触发-bfc-的条件" tabindex="-1">三、触发 BFC 的条件 <a class="header-anchor" href="#三、触发-bfc-的条件" aria-label="Permalink to &quot;三、触发 BFC 的条件&quot;">​</a></h2><p>以下是触发 BFC 的常见条件：</p><ol><li><strong>浮动元素</strong>：当一个元素设置了<code>float</code>属性（除了<code>none</code>值）时，会触发 BFC。例如：</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.float-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>浮动元素会脱离普通文档流，但是会创建一个新的 BFC。在这个 BFC 中，浮动元素可以与其他元素正确地布局，并且不会影响外部元素的布局。</p><ol start="2"><li><strong>绝对定位元素</strong>：当一个元素设置了<code>position</code>属性为<code>absolute</code>或<code>fixed</code>时，会触发 BFC。例如：</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.absolute-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">absolute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>绝对定位元素会脱离普通文档流，创建一个新的 BFC。这使得绝对定位元素可以相对于包含块进行定位，而不会受到其他元素的影响。</p><ol start="3"><li><strong>display 为 inline-block、table-cell、table-caption、flex、inline-flex</strong>：当一个元素的<code>display</code>属性设置为这些值中的任何一个时，会触发 BFC。例如：</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.inline-block-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.table-cell-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table-cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些显示属性会使元素以不同的方式进行布局，并创建一个新的 BFC。</p><ol start="4"><li><strong>overflow 不为 visible</strong>：当一个元素的<code>overflow</code>属性设置为除了<code>visible</code>之外的值（如<code>hidden</code>、<code>auto</code>、<code>scroll</code>）时，会触发 BFC。例如：</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.overflow-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>设置<code>overflow</code>属性可以创建一个新的 BFC，防止元素的内容溢出，并可以解决一些布局问题。</p><p>除此之外，根元素， HTML 元素本身就是 BFC（ <strong>最大的一个 BFC</strong> ）</p><h2 id="四、bfc-的实际应用" tabindex="-1">四、BFC 的实际应用 <a class="header-anchor" href="#四、bfc-的实际应用" aria-label="Permalink to &quot;四、BFC 的实际应用&quot;">​</a></h2><ol><li><strong>防止 margin 合并</strong>：当两个相邻的块级元素都设置了 margin 时，它们之间的 margin 会发生合并。通过将其中一个元素设置为触发 BFC 的条件，可以防止 margin 合并。例如：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Box 1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Box 2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的例子中，两个<code>div</code>元素之间的 margin 会发生合并，实际的 margin 距离为 50px（取较大值）。如果将其中一个<code>div</code>元素设置为触发 BFC 的条件，比如设置<code>overflow: hidden</code>，则可以防止 margin 合并。</p><ol start="2"><li><strong>清除浮动</strong>：当一个父元素包含浮动元素时，父元素的高度可能会塌陷。通过在父元素上触发 BFC，可以使父元素包含浮动元素，从而解决高度塌陷问题。例如：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;float-child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Float Child&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.float-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 添加以下属性触发 BFC */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的例子中，父元素<code>.parent</code>由于包含了浮动元素<code>.float-child</code>，其高度会塌陷。通过设置<code>overflow: hidden</code>在父元素上触发 BFC，可以使父元素包含浮动元素，从而解决高度塌陷问题。</p><ol start="3"><li><strong>避免元素被浮动元素覆盖</strong>：当一个元素与浮动元素相邻时，可能会被浮动元素覆盖。通过在该元素上触发 BFC，可以避免被浮动元素覆盖。例如：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;float-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Float Element&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;normal-element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Normal Element&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.float-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.normal-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 添加以下属性触发 BFC */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的例子中，普通元素<code>.normal-element</code>可能会被浮动元素<code>.float-element</code>覆盖。通过设置<code>overflow: hidden</code>在普通元素上触发 BFC，可以避免被浮动元素覆盖。</p><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>BFC 是前端开发中一个重要的概念，它可以帮助我们解决许多布局问题。了解触发 BFC 的条件，并在实际开发中灵活运用，可以提高我们的布局能力，使页面更加稳定和美观。通过本文的介绍，希望大家对 BFC 有了更深入的理解，并能够在实际项目中加以应用。</p><h2 id="扩展-css-格式化上下文" tabindex="-1">扩展-CSS 格式化上下文 <a class="header-anchor" href="#扩展-css-格式化上下文" aria-label="Permalink to &quot;扩展-CSS 格式化上下文&quot;">​</a></h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>在 CSS 中除了 BFC （块级格式化上下文），还有 IFC、GFC、FFC 等，这些统称为 CSS <strong>格式化上下文</strong> ，也被称作 <strong>视觉格式化模型</strong> 。而 CSS 视觉格式化模型是用来处理文档并将它显示在视觉媒体上的机制。</p><p>简单地说， CSS 格式化上下文 <strong>就是用来控制盒子的位置，即实现页面的布局</strong> 。</p><h3 id="ifc-行内格式上下文" tabindex="-1">IFC：行内格式上下文 <a class="header-anchor" href="#ifc-行内格式上下文" aria-label="Permalink to &quot;IFC：行内格式上下文&quot;">​</a></h3><p>行内格式化上下文（Inline Formatting Context），简称 <strong>IFC</strong> 。主要用来规则行内级盒子的格式化规则。</p><p>IFC 的 line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的 padding/margin 影响)</p><p>IFC 的行盒的高度是根据包含行内元素中最高的实际高度计算而来。主要会涉及到 CSS 中的 <code>font-size</code> 、 <code>line-height</code> 、 <code>vertical-align</code> 和 <code>text-align</code> 等属性。</p><p>行内元素从包含块顶端水平方向上逐一排列，水平方向上的 <code>margin</code> 、 <code>border</code> 、 <code>padding</code> 生效。行内元素在垂直方向上可按照顶部、底部或基线对齐。</p><p>当几个行内元素不能在一个单独的行盒中水平放置时，他们会被分配给两个或更多的(Vertically-stacked Line Box)垂直栈上的行盒，因此，一个段落是很多行盒的垂直栈。这些行盒不会在垂直方向上被分离（除非在其他地方有特殊规定），并且他们也不重叠。</p><p>那么 IFC 一般有什么用呢？</p><ul><li>垂直方向上，当行内元素的高度比行盒要低，那么 <code>vertical-align</code> 属性决定垂直方向上的对齐方式。</li><li>水平方向上，当行内元素的总宽度比行盒要小，那么行内元素在水平方向上的分部由 <code>text-align</code> 决定。</li><li>水平方向上，当行内元素的总宽度超过了行盒，那么行内元素会被分配到多个行盒中去，如果设置了不可折行等属性，那么行内元素会溢出行盒。</li><li>行盒的左右两边都会触碰到包含块，而 <code>ef=&quot;https://github.com/sisterAn/blog&quot;&gt;float 元素则会被放置在行盒和包含快边缘的中间位置。</code></li></ul><h3 id="gfc-gridelayout-formatting-contexts-网格布局格式化上下文" tabindex="-1">GFC（GrideLayout formatting contexts）：网格布局格式化上下文 <a class="header-anchor" href="#gfc-gridelayout-formatting-contexts-网格布局格式化上下文" aria-label="Permalink to &quot;GFC（GrideLayout formatting contexts）：网格布局格式化上下文&quot;">​</a></h3><p>Grid 格式化上下文（Grid Formaatting Context），俗称 <strong>GFC</strong> 。和 FFC 有点类似，元素的 <code>display</code> 值为 <code>grid</code> 或 <code>inline-grid</code> 时，将会创建一个 Grid 容器。该完完全全器为其内容创建一个新的格式化上下文，即 Grid 格式化上下文。这和创建 BFC 是一样的，只是使用了网格布局而不是块布局。</p><p>那么 GFC 有什么用呢，和 table 又有什么区别呢？首先同样是一个二维的表格，但 GridLayout 会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。</p><h3 id="ffc-flex-formatting-contexts-自适应格式上下文" tabindex="-1">FFC（Flex formatting contexts）:自适应格式上下文 <a class="header-anchor" href="#ffc-flex-formatting-contexts-自适应格式上下文" aria-label="Permalink to &quot;FFC（Flex formatting contexts）:自适应格式上下文&quot;">​</a></h3><p>Flex 格式化上下文（Flexbox Formatting Context）俗称 <strong>FFC</strong> 。当 <code>display</code> 取值为 <code>flex</code> 或 <code>inline-flex</code> ，将会创建一个 Flexbox 容器。该容器为其内容创建一个新的格式化上下文，即 Flex 格式化上下文。</p><p>可惜这个牛逼的属性只有谷歌和火狐支持，不过在移动端也足够了，至少 safari 和 chrome 还是 OK 的，毕竟这俩在移动端才是王道。</p><p>不过要注意的是，Flexbox 容器不是块容器（块级盒子），下列适用于块布局的属性并不适用于 Flexbox 布局：</p><ul><li>多列中的 <code>column-*</code> 属性不适用于 Flexbox 容器</li><li><code>float</code> 和 <code>clear</code> 属性作用于 Flex 项目上将无效，也不会把让 Flex 项目脱离文档流</li><li><code>vertical-algin</code> 属性作用于 Flex 项目上将无效</li><li><code>::first-line</code> 和 <code>::first-letter</code> 伪元素不适用于 Flexbox 容器，而且 Flexbox 容器不为他们的祖先提供第一个格式化的行或第一个字母</li></ul>`,59)]))}const c=i(t,[["render",e]]);export{E as __pageData,c as default};
