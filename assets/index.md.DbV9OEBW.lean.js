import{_ as i,c as a,a0 as t,o}from"./chunks/framework.V6wbqQ68.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"LBJhui-blog","text":"随便写写，没什么想法","image":{"src":"bg.jpeg"},"actions":[{"theme":"brand","text":"Get Start","link":"/website/language/JavaScript/High-Performance JavaScript/第1章 什么是JavaScript"}]}},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),r={name:"index.md"};function e(n,l,s,g,u,h){return o(),a("div",null,l[0]||(l[0]=[t('<h2 id="业务亮点" tabindex="-1">业务亮点 <a class="header-anchor" href="#业务亮点" aria-label="Permalink to &quot;业务亮点&quot;">​</a></h2><p>在梳理业务亮点之前，要充分理解业务，这是很多同学欠缺的。</p><h2 id="业务方向" tabindex="-1">业务方向 <a class="header-anchor" href="#业务方向" aria-label="Permalink to &quot;业务方向&quot;">​</a></h2><h3 id="低代码-无代码-low-code-no-code" tabindex="-1"><span style="background:lightblue;">低代码/无代码（Low Code/No Code）</span> <a class="header-anchor" href="#低代码-无代码-low-code-no-code" aria-label="Permalink to &quot;&lt;span style=&quot;background:lightblue;&quot;&gt;低代码/无代码（Low Code/No Code）&lt;/span&gt;&quot;">​</a></h3><ul><li><p><strong>产品示例：阿里云-宜搭</strong></p><ul><li>功能：企业级低代码应用构建平台</li><li>特点：拖拽式页面搭建、流程编排、数据集成</li><li>技术：Node.js、Vue.js、Ant Design</li></ul></li><li><p><strong>产品示例：腾讯云-微搭</strong></p><ul><li>功能：无代码平台，支持小程序和 Web 应用开发</li><li>特点：跨平台应用、内置模板库、流程自动化</li><li>技术：Node.js、React、Ant Design</li></ul></li><li><p><strong>产品示例：ClickPaas</strong></p><ul><li><p>功能：低代码开发与应用集成</p></li><li><p>特点：支持多类型业务系统集成、强大的数据建模</p></li><li><p>技术：Node.js、React、Ant Design</p></li></ul></li></ul><p>lowcode: retool、iila cloud</p><p>nocode: glide、ramer</p><h3 id="客户关系管理-crm" tabindex="-1">客户关系管理（CRM） <a class="header-anchor" href="#客户关系管理-crm" aria-label="Permalink to &quot;客户关系管理（CRM）&quot;">​</a></h3><ul><li><p><strong>产品示例：销售易</strong></p><ul><li><p>功能：智能 CRM 与销售管理平台</p></li><li><p>特点：全渠道销售、数据驱动、AI 推荐</p></li><li><p>技术：Node.js、Vue.js、Ant Design</p></li></ul></li><li><p><strong>产品示例：纷享销客</strong></p><ul><li><p>功能：移动办公与客户关系管理</p></li><li><p>特点：全渠道营销、智能销售预测、客户全生命周期管理</p></li><li><p>技术：Java、JavaScript、Spring Boot</p></li></ul></li></ul><h3 id="数字孪生" tabindex="-1"><span style="background:lightblue;">数字孪生</span> <a class="header-anchor" href="#数字孪生" aria-label="Permalink to &quot;&lt;span style=&quot;background:lightblue;&quot;&gt;数字孪生&lt;/span&gt;&quot;">​</a></h3><ul><li><p><strong>产品示例：易知微</strong></p><ul><li>功能：数字孪生低代码</li><li>特点：拖拉拽实现数字孪生需求</li><li>技术：Node.js、React、WebGL</li></ul></li><li><p><strong>产品示例：阿里云-达摩院城市大脑</strong></p><ul><li>功能：智慧城市与数字孪生平台</li><li>特点：城市数据融合、实时分析与智能决策</li><li>技术：Node.js、React、WebGL</li></ul></li><li><p><strong>产品示例：腾讯-数字孪生城市</strong></p><ul><li>功能：城市级数字孪生与智慧管理</li><li>特点：多层级数据融合、实时渲染、决策支持</li><li>技术：Node.js、Three.js、WebGL</li></ul></li></ul><h3 id="商业智能-bi" tabindex="-1"><span style="background:lightblue;">商业智能（BI）</span> <a class="header-anchor" href="#商业智能-bi" aria-label="Permalink to &quot;&lt;span style=&quot;background:lightblue;&quot;&gt;商业智能（BI）&lt;/span&gt;&quot;">​</a></h3><ul><li><strong>产品示例：阿里云-Quick Bi</strong><ul><li>功能：企业级商业智能与数据可视化</li><li>特点：自助数据分析、丰富数据源、拖拽式报表</li><li>技术：Node.js、React、AntV</li></ul></li><li><strong>产品示例：腾讯云-云慧 BI</strong><ul><li>功能：全流程商业智能与数据洞察平台</li><li>特点：内置分析模型、多维度可视化、实时数据监控</li><li>技术：Node.js、Vue.js、AntV</li></ul></li><li><strong>产品示例：帆软-FineBI</strong><ul><li>功能：企业级商业智能与自助数据分析</li><li>特点：自助式分析、动态报表、智能预警</li><li>技术：Java、JavaScript、Ant Design</li></ul></li><li><strong>产品示例：致远互联-氚云</strong><ul><li>功能：自助式商业智能与可视化报表</li><li>特点：跨部门数据整合、多维度分析、预测分析</li><li>技术：Node.js、Vue.js、AntV</li></ul></li></ul><p>bdp、powerBI</p><h3 id="内容管理与发布-cms" tabindex="-1">内容管理与发布（CMS） <a class="header-anchor" href="#内容管理与发布-cms" aria-label="Permalink to &quot;内容管理与发布（CMS）&quot;">​</a></h3><ul><li><strong>产品示例：WordPress</strong><ul><li>功能：博客、网站的内容创建与管理</li><li>特点：灵活的主题与插件系统</li><li>技术：PHP、JavaScript、Gutenberg 编辑器</li></ul></li><li><strong>产品示例：Contentful</strong><ul><li>功能：内容管理与 API 交付</li><li>特点：无头 CMS，GraphQL API</li><li>技术：Node.js、React、GraphQL</li></ul></li></ul><h3 id="电子商务" tabindex="-1">电子商务 <a class="header-anchor" href="#电子商务" aria-label="Permalink to &quot;电子商务&quot;">​</a></h3><ul><li><strong>产品示例：Shopify</strong><ul><li>功能：在线商店与支付系统</li><li>特点：灵活的模版与插件系统</li><li>技术：React、Liquid、GraphQL</li></ul></li><li><strong>产品示例：Magento</strong><ul><li>功能：电子商务平台与多渠道零售</li><li>特点：支持 B2B 和 B2C 业务、可定制性强</li><li>技术：PHP、JavaScript、PWA Studio</li></ul></li><li><strong>产品示例：WooCommerce</strong><ul><li>功能：基于 WordPress 的电商插件</li><li>特点：支持扩展、适合中小型商家</li><li>技术：PHP、JavaScript、REST API</li></ul></li></ul><h3 id="协作与办公工具" tabindex="-1"><span style="background:lightblue;">协作与办公工具</span> <a class="header-anchor" href="#协作与办公工具" aria-label="Permalink to &quot;&lt;span style=&quot;background:lightblue;&quot;&gt;协作与办公工具&lt;/span&gt;&quot;">​</a></h3><ul><li><strong>产品示例：Trello</strong><ul><li>功能：团队协作与项目管理</li><li>特点：卡片式任务看板、插件系统</li><li>技术：Node.js、React、REST API</li></ul></li><li><strong>产品示例：Slack</strong><ul><li>功能：企业即时通讯与协作工具</li><li>特点：集成第三方应用、频道化沟通</li><li>技术：Electron、React、GraphQL</li></ul></li><li><strong>产品示例：Notion</strong><ul><li>功能：知识管理、任务管理与文档协作</li><li>特点：灵活的数据库与模版系统</li><li>技术：React、Node.js、Electron</li></ul></li></ul><h3 id="企业软件与-saas" tabindex="-1">企业软件与 SaaS <a class="header-anchor" href="#企业软件与-saas" aria-label="Permalink to &quot;企业软件与 SaaS&quot;">​</a></h3><ul><li><strong>产品示例：Salesforce</strong><ul><li>功能：客户关系管理、销售自动化</li><li>特点：全面的 SaaS 解决方案、AppExchange 应用市场</li><li>技术：Apex、JavaScript、Lightning Web Components</li></ul></li><li><strong>产品示例：Zendest</strong><ul><li>功能：客户服务与支持管理</li><li>特点：工单系统、多渠道沟通</li><li>技术：React、Node.js、Ruby</li></ul></li><li><strong>产品示例：Workday</strong><ul><li>功能：人力资源与财务管理</li><li>特点：人力资本管理、财务规划与分析</li><li>技术：Java、JavaScript、Node.js</li></ul></li></ul><h3 id="业务架构设计" tabindex="-1">业务架构设计 <a class="header-anchor" href="#业务架构设计" aria-label="Permalink to &quot;业务架构设计&quot;">​</a></h3><h2 id="团队基建亮点" tabindex="-1">团队基建亮点 <a class="header-anchor" href="#团队基建亮点" aria-label="Permalink to &quot;团队基建亮点&quot;">​</a></h2><ul><li>“技术基建”，即为研发团队的<strong>技术基础设施建设</strong>，一个团队通用技术能力沉淀</li><li>文档规范，脚手架工具，工程化、工具链，凡是能促进业务效率、沟通成本都可以称作基建</li></ul><h3 id="意义" tabindex="-1">意义 <a class="header-anchor" href="#意义" aria-label="Permalink to &quot;意义&quot;">​</a></h3><p>主要是为了以下几点：</p><ul><li><strong>业务复用，提高效率</strong>：基建可以提高单个人的工作产出和工作 效率，可以从代码层面解决一些普遍性和常用性的业务问题</li><li><strong>规范、优化流程制度</strong>：优异的流程制度必将带来正面的、积极的、有实效的业务支撑</li><li><strong>更好面对未来业务发展</strong>：像建房子一样，好的地基可以建出万丈高楼</li><li><strong>影响力建设、开源建设</strong>：建设结果对于业务的促进，更容易获得内部合作方的认可；沉淀下来的好的经验，可以对外输出分享，也是对<strong>影响力</strong>的有力帮助</li></ul><h3 id="落地前思考" tabindex="-1">落地前思考 <a class="header-anchor" href="#落地前思考" aria-label="Permalink to &quot;落地前思考&quot;">​</a></h3><h4 id="大方向" tabindex="-1">大方向 <a class="header-anchor" href="#大方向" aria-label="Permalink to &quot;大方向&quot;">​</a></h4><ul><li><strong>三个落地要素</strong>：公司的团队规模、公司的业务、团队水平</li><li><strong>四大基础特性</strong>：技术的健全性、基建的稳定性、研发的效率性、业务的体验性</li></ul><h4 id="实施准备" tabindex="-1">实施准备 <a class="header-anchor" href="#实施准备" aria-label="Permalink to &quot;实施准备&quot;">​</a></h4><p>基建开始之前，首先得确定建设的策略及步骤，主要是<strong>拆解研发流程</strong>入手的</p><p>一个基本的研发流程闭环一般是：</p><ul><li>需求确定</li><li>需求拆解</li><li>技术方案制定</li><li>编码</li><li>联调</li><li>自测优化</li><li>提测与 bug 修复</li><li>部署发布</li><li>监控与数据收集复盘</li><li>迭代优化</li></ul><p>在研发流程闭环中每一个环节的<strong>阻塞点越少，研发效率就越高</strong>。基建，就是从这些耽误研发时间的阻塞点入手，按照普遍性+高频的优先级标准，挨个突破。</p><h4 id="发力点" tabindex="-1">发力点 <a class="header-anchor" href="#发力点" aria-label="Permalink to &quot;发力点&quot;">​</a></h4><p>通用的公式是：<strong>标准化+规范化+工具化+自动化</strong>，能力完备后可以进一步提升到平台化+产品化。在方向上，主要是从下面的<strong>7 个主要方向</strong>进行归类和建设，供大家参考：</p><ul><li><strong>开发规范</strong>：这一部分沉淀的是团队的标准化共识，标准化是团队有效协作的必备前提</li><li><strong>研发流程</strong>：标准化流程直接影响上下游的协作分工和效率，优秀的流程能带来更专业的协作</li><li><strong>工程管理</strong>：面向应用全生命周期的低成本管控，从应用的创建到本地环境配置到低代码搭建到打包部署</li><li><strong>性能体验</strong>：自动化工具化的方式发现页面性能瓶颈，提供优化建议</li><li><strong>安全防控</strong>：三方包依赖安全、代码合规性检查、安全风险检测等防控机制</li><li><strong>统计监控</strong>：埋点方案、数据采集、数据分析、线上异常监控等</li><li><strong>质量保障</strong>：自测 CheckList、单测、UI 自动化测试、链路自动化测试等</li></ul><p>如上是一般性前端基建的主要方向和分区，不论是 PC 端还是移动端，这些都是基础的建设点。业务阶段、团队能力的差异，体现在基建上，在于产出的<strong>完整性</strong>、<strong>颗粒度</strong>、<strong>深入度</strong>和<strong>自动化</strong>的覆盖范围</p><h4 id="大小公司基建重点" tabindex="-1">大小公司基建重点 <a class="header-anchor" href="#大小公司基建重点" aria-label="Permalink to &quot;大小公司基建重点&quot;">​</a></h4><ul><li><strong>小公司</strong>：针对一些小团队或者说偏初创期的团队，其建设，往往越偏向于基础的<strong>技术收益</strong>，如<strong>脚手架</strong>、<strong>组件库</strong>、<strong>打包部署工具</strong>等；优先级应该排好，推荐初创公司和小团队成立优先搭建好：规范文档、统一开发环境技术栈/方法/工具、项目模板、CI/CD 流程，把基础的闭环优先搭建起来</li><li><strong>大公司</strong>：越是成熟的业务和成熟沉淀的团队，其建设会越偏向于获取更多的<strong>业务收益</strong>，如直接服务于业务的系统，技术提效的同时更能直接带来业务收益。搭建起一套坚实的项目底座，能够更好的支持上层建筑的发展，同时也能够提升团队的成长，打开在业界的知名度，获取更好的信任支持。大公司在基础建设上，会更加考虑<strong>数据一些监控以及数据的埋点分析和统计</strong>，更加的偏重于<strong>数据的安全防范</strong>，做到质量保证</li></ul><h3 id="落地" tabindex="-1">落地 <a class="header-anchor" href="#落地" aria-label="Permalink to &quot;落地&quot;">​</a></h3><h4 id="规范-文档" tabindex="-1">规范&amp;文档 <a class="header-anchor" href="#规范-文档" aria-label="Permalink to &quot;规范&amp;文档&quot;">​</a></h4><p>规范和文档是最应该<strong>先行</strong>的，规范意味着<strong>标准</strong>，是团队的共识，是沟通协作的基础</p><p><strong>文档</strong>：</p><ul><li>新人文档（公司、业务、团队、流程等）</li><li>技术文档</li><li>业务文档</li><li>项目文档（旧的、新的）</li><li>计划文档（月度、季度、年度）</li><li>技术分析交流会文档</li></ul><p><strong>规范</strong>：</p><ul><li><strong>项目目录规范</strong>：比如 api，组件，页面，路由，hooks，store 等</li><li><strong>代码书写规范</strong>：组件结构、接口（定义好参数类型和响应数据类型）、事件、工具约束代码规范、代码规范、git 提交规范</li></ul><h4 id="脚手架" tabindex="-1">脚手架 <a class="header-anchor" href="#脚手架" aria-label="Permalink to &quot;脚手架&quot;">​</a></h4><p>开发和维护一个通用的脚手架工具，可以帮助团队<strong>快速初始化项目结构、配置构建工具、集成常用的开发依赖</strong>等</p><p>省事的可能直接拥抱框架选型对应的全家桶，如 Vue 全家桶，或者用 Webpack 撸一个脚手架。能力多一些的会再为脚手架提供一些插件服务，如 Lint 或者 Mock。从简单的一个本地脚手架，到复杂的一个工程化套件系统。</p><h4 id="组件沉淀" tabindex="-1">组件沉淀 <a class="header-anchor" href="#组件沉淀" aria-label="Permalink to &quot;组件沉淀&quot;">​</a></h4><p>公司项目多了会有很多公共的组件，可以抽离出来，方便自身和其他项目复用，一般可以分为以下几种组件：</p><ul><li><strong>UI 组件</strong>：antd、element、vant、uview...</li><li><strong>业务组件</strong>：表单、表格、搜索...</li><li><strong>功能组件</strong>：上拉刷新、滚动到底部加载更多、虚拟滚动、拖拽排序、图片懒加载...</li></ul><h4 id="工具-函数库" tabindex="-1">工具/函数库 <a class="header-anchor" href="#工具-函数库" aria-label="Permalink to &quot;工具/函数库&quot;">​</a></h4><p>前端工具库，如 axios、lodash、Day.js、moment.js、big.js 等等</p><p>常见的方法/API 封装：query 参数解析、device 设备解析、环境区分、localStorage 封装、Day 日期格式封装、Thousands 千分位格式化、防抖、节流、数组去重、数组扁平化、排序、判断类型等常用的<strong>方法</strong>和<strong>hooks</strong>抽离出来组成<strong>函数库</strong>，方便在各个项目中使用</p><h4 id="最佳实践模版" tabindex="-1">最佳实践模版 <a class="header-anchor" href="#最佳实践模版" aria-label="Permalink to &quot;最佳实践模版&quot;">​</a></h4><p>可以提前根据公司的业务需求，封装出各个端对应通用开发模版，封装好项目目录结构，接口请求，状态管理，代码规范，git 规范钩子，页面适配，权限，本地存储管理等等，来减少开发新项目时前端准备工作时间，也能更好的统一公司整体的代码规范</p><ol><li>通用<strong>后台管理</strong>系统基础模版封装</li><li>通用<strong>小程序</strong>系统基础模版封装</li><li>通用<strong>h5</strong>系统基础模版封装</li><li>通用<strong>node</strong>系统基础模版封装</li><li>其他类型的项目默认模版封装，减少重复工作</li></ol><h4 id="ci-cd-构建部署" tabindex="-1">CI/CD 构建部署 <a class="header-anchor" href="#ci-cd-构建部署" aria-label="Permalink to &quot;CI/CD 构建部署&quot;">​</a></h4><p>前端具备自己的构建部署系统，便于专业化方面更好的控制流程。很多公司目前，都实现了<strong>云打包、云检测和自动化部署</strong>，每次 git commit 代码后，都会自动的为你部署项目至测试环境、预生产环境、生产环境，不用你每次手动的去打包后 cv 到多个服务器和环境。开发新的独立系统之初，以便实现代码的合规性静态检测能力。如果可以的话，可以去实现一套插件化机制，可以按需配置不同的检测项，如某检测项检测不通过，最终会阻塞发布流程</p><h4 id="数据埋点与分析" tabindex="-1">数据埋点与分析 <a class="header-anchor" href="#数据埋点与分析" aria-label="Permalink to &quot;数据埋点与分析&quot;">​</a></h4><p>前端团队可以做的是 Web 数据埋点收集和数据分析、可视化相关的全系统建设。可实现埋点规范、埋点 SDK、数据收集与分析、PV/UV、链路分析、转化分析、用户画像、可视化热图、坑位粒度数据透出等数据化能力，下面给大家细分一些这些数据：</p><ul><li>行为数据：时间、地点、人物、交互、交互的内容</li><li>质量数据：浏览器加载情况、错误异常等</li><li>环境数据：浏览器相关的元数据以及地理、运营商等</li><li>运营数据：PV、UV、转化率、留存率（很直观的数据）</li></ul><h4 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h4><p>将你的大型前端应用拆分为多个小型前端应用，这样每个小型前端应用都有自己的仓库，可以专注于单一的某个功能；也可以再聚合成有各个应用组成的一个平台，而各个应用使用的技术栈可以不同，也就是可以将不同技术栈的项目给整合到一块。</p><h2 id="技术深度与架构亮点" tabindex="-1">技术深度与架构亮点 <a class="header-anchor" href="#技术深度与架构亮点" aria-label="Permalink to &quot;技术深度与架构亮点&quot;">​</a></h2><ul><li>微前端在分拆原子应用场景下的落地与实践</li><li>协同编辑器从零到一架构实现</li><li>推动团队基建落地</li><li>数字孪生平台整体架构设计</li><li>低代码平台编排引擎设计与实现</li><li>低代码平台流程引擎设计与实践</li><li>低代码平台编辑器实现</li><li>低代码平台执行器与 JavaScript 沙箱设计</li><li>用户行为分析 SDK 及监控可视化整体实现</li><li>Webpack 打包构建优化改良</li><li>可视化渲染引擎设计与实现</li></ul><h2 id="不同阶段对前端的要求" tabindex="-1">不同阶段对前端的要求 <a class="header-anchor" href="#不同阶段对前端的要求" aria-label="Permalink to &quot;不同阶段对前端的要求&quot;">​</a></h2><p><strong>1~3 年</strong></p><p>在此阶段，重点在于评估个人的基础知识和热情。对前端基础、计算机原理、网络通信和算法等领域的要求较高。由于在此阶段难以评估业务深度，因此更多关注基础知识的掌握程度。</p><ul><li>关键在于通过学术教育或网络资源加强基础知识</li><li>在简历中以多种方式展示对前端的热情，展现个人潜力</li><li>积极探索前沿技术，关注国内外技术动态</li><li>尝试开发小型项目或参与社区开源项目</li><li>建立技术博客，以输出促进知识吸收</li></ul><p><strong>3~5 年</strong></p><p>此阶段通常是向成为独立工程师发展的关键时期，避免重复使用有限的经验</p><ul><li>关注社区中关于进阶 的资料和路线，强化基础知识</li><li>深入掌握常用框架的高级用法，探索其原理</li><li>在业务开发中不仅完成功能，还需考虑项目结构设计、封装基础工具、设计和开发基础组件</li><li>思考提高团队效率的方法，例如： <ul><li>集成代码检验和风格统一插件（如 eslint、stylelint、prettier）</li><li>从工程化角度提高本地开发效率，优化 webpack 构建、探索 esbuild、vite 等工具</li><li>对于多项目开发，整理差异和统一部分，建立内部脚手架以减少重复工作</li><li>尝试搭建 CI/CD 平台，维护公司内部的通用 npm 包</li><li>培养软技能，如沟通协作，协调各角色共同推进目标</li></ul></li></ul><p><strong>5 年以上</strong></p><p>进入此阶段，可能朝技术专家或管理方向发展。期望你能够独立负责高复杂度项目，突破关键技术难题</p><ul><li>负责技术调研，关注行业趋势，选择最优技术方案，具备决策能力</li><li>拥有丰富的技术经验和技术储备，能够解决遇到的困难，并有自己的方法论</li><li>协助或主导业务目标制定，合理推动项目达成预期效果</li><li>是否具有团队领导经验，能够协调跨团队项目，处理团队成员情绪问题，解决技能分布不平衡等问题</li><li>打造技术氛围，促进团队共同成长</li></ul>',80)]))}const c=i(r,[["render",e]]);export{p as __pageData,c as default};
