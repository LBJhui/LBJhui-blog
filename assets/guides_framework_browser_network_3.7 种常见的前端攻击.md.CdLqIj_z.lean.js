import{_ as i,c as t,a0 as a,o as n}from"./chunks/framework.V6wbqQ68.js";const E=JSON.parse('{"title":"7 种常见的前端攻击","description":"","frontmatter":{},"headers":[],"relativePath":"guides/framework/browser&network/3.7 种常见的前端攻击.md","filePath":"guides/framework/browser&network/3.7 种常见的前端攻击.md"}'),l={name:"guides/framework/browser&network/3.7 种常见的前端攻击.md"};function h(p,s,k,e,r,o){return n(),t("div",null,s[0]||(s[0]=[a(`<h1 id="_7-种常见的前端攻击" tabindex="-1">7 种常见的前端攻击 <a class="header-anchor" href="#_7-种常见的前端攻击" aria-label="Permalink to &quot;7 种常见的前端攻击&quot;">​</a></h1><p>大家都知道，保证网站的安全是十分重要的，一旦网站被攻陷，就有可能造成用户的经济损失，隐私泄露，网站功能被破坏，或者是传播恶意病毒等重大危害。所以下面我们就来讲讲 7 种常见的前端攻击。</p><h2 id="_1-跨站脚本-xss" tabindex="-1"><strong>1. 跨站脚本 (XSS)</strong> <a class="header-anchor" href="#_1-跨站脚本-xss" aria-label="Permalink to &quot;**1. 跨站脚本 (XSS)**&quot;">​</a></h2><blockquote><p>跨站脚本攻击 (XSS) 是一种注入攻击，攻击者通过将恶意脚本注入到网页中，欺骗用户浏览器执行，从而窃取用户敏感信息或破坏网站。XSS 攻击是 Web 应用程序中最常见的安全威胁之一，也是造成重大安全事故的常见原因。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>反射型 XSS:</strong> 攻击者将恶意脚本注入到用户提交的数据中，例如评论表单、搜索表单等。当用户提交数据时，恶意脚本会被原样反射回用户浏览器，并被执行。</li><li><strong>存储型 XSS:</strong> 攻击者将恶意脚本存储在服务器端，例如将恶意脚本注入到数据库中。当用户访问包含恶意脚本的页面时，恶意脚本会被浏览器执行。</li><li><strong>DOM 型 XSS:</strong> 攻击者利用浏览器 DOM 的漏洞来执行恶意脚本。例如，攻击者可以利用 <code>&lt;script&gt;</code> 标签的 <code>onerror</code> 属性来执行恶意脚本。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>对用户输入进行转义和过滤:</strong> 使用 HTML 实体转义或其他安全编码方法来转义用户输入中的特殊字符，防止恶意脚本注入。</li><li><strong>使用 HTTPOnly Cookie:</strong> 将 Cookie 的 <code>HttpOnly</code> 属性设置为 <code>true</code>，可以防止 JavaScript 代码直接访问 Cookie。</li><li><strong>使用 Content Security Policy (CSP):</strong> CSP 是一种通过配置浏览器安全机制来限制网页中可执行内容的安全技术。</li><li><strong>使用前端常用框架 (如 Vue,React 等):这些框架模板字符一般都经过转义和过滤,具有一定的安全性</strong> 。<strong>代码示例</strong></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/submit_comment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;comment&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;提交评论&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>上面表单中没有对用户输入的评论进行过滤，攻击者可以输入恶意 JavaScript 代码，例如：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.cookie) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 窃取用户Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>当用户提交评论时，恶意代码会被嵌入到评论中，并保存在服务器上。</li><li>当其他用户访问包含恶意评论的页面时，恶意代码会被浏览器执行，从而窃取用户 Cookie 或造成其他伤害。</li></ul><h2 id="_2-依赖库风险" tabindex="-1"><strong>2. 依赖库风险</strong> <a class="header-anchor" href="#_2-依赖库风险" aria-label="Permalink to &quot;**2. 依赖库风险**&quot;">​</a></h2><blockquote><p>前端网站通常会依赖很多的第三方库和组件来实现各种功能。如果这些依赖库存在漏洞，攻击者可以利用这些漏洞来攻击网站。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>远程代码执行 (RCE):</strong> 攻击者可以利用依赖库漏洞在受害者的浏览器或服务器上执行任意代码。</li><li><strong>跨站请求伪造 (CSRF):</strong> 攻击者可以利用依赖库漏洞伪造用户请求，诱骗用户执行非预期的操作。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>使用经过安全审计的依赖库:</strong> 选择使用经过安全审计的依赖库，可以减少依赖库漏洞的风险。</li><li><strong>定期更新依赖库:</strong> 定期更新依赖库，及时修复已知的安全漏洞。</li><li><strong>尽量减少对第三方库的依赖:</strong> 尽量减少对第三方库的依赖，自己开发代码，可以</li></ul><p><strong>代码示例:</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用存在漏洞的第三方库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsdom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsdom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jsdom.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsdom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析包含恶意JavaScript代码的HTML</span></span></code></pre></div><h2 id="_3-跨站请求伪造-csrf" tabindex="-1"><strong>3. 跨站请求伪造 (CSRF)</strong> <a class="header-anchor" href="#_3-跨站请求伪造-csrf" aria-label="Permalink to &quot;**3. 跨站请求伪造 (CSRF)**&quot;">​</a></h2><blockquote><p>跨站请求伪造 (CSRF) 是一种安全攻击，攻击者诱骗用户在其已登录的应用程序中执行非预期的操作，例如转账、修改个人信息等。CSRF 攻击通常利用用户的信任来实施，因为用户在自己的浏览器中看到的是来自可信网站的请求，而没有意识到该请求实际上是被攻击者伪造的。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li>利用<strong>表单</strong>提或者<strong>链接跳转</strong>。攻击者会构造一个恶意表单或者链接，诱骗用户点击。当用户点击表单时，会向受害者的应用程序发送一个 POST 请求或者 GET 请求，其中包含攻击者想要执行的操作。</li><li><strong>利用图片请求:</strong> 攻击者利用浏览器对图片的自动请求特性，构造一个包含恶意请求的图片。当用户浏览包含恶意图片的页面时，浏览器会自动向受害者的应用程序发送请求，其中包含攻击者想要执行的操作。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>在表单中添加 CSRF 令牌:</strong> 在表单中添加一个随机生成的 CSRF 令牌，并将其作为隐藏域提交给服务器。服务器端在验证用户请求时，会检查 CSRF 令牌的有效性。</li><li><strong>使用 HTTP Referer 头:</strong> 使用 HTTP Referer 头来检查请求来源，防止跨域请求。</li><li><strong>使用 SameSite Cookie 属性:</strong> 将 Cookie 的 <code>SameSite</code> 属性设置为 <code>Strict</code>，可以防止 CSRF 攻击。</li></ul><p><strong>代码示例:</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/transfer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amount&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;转账&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>上面的表单中没有使用 CSRF 令牌，攻击者可以构造一个恶意链接，诱骗用户点击。</li><li>当用户点击恶意链接时，会向转账页面发送一个 POST 请求，其中包含转账金额等信息。</li><li>由于用户的浏览器会自动携带 Cookie，攻击者可以利用 Cookie 来冒充用户身份，执行转账操作。</li></ul><h2 id="_4-点击劫持-clickjacking" tabindex="-1"><strong>4. 点击劫持 (Clickjacking)</strong> <a class="header-anchor" href="#_4-点击劫持-clickjacking" aria-label="Permalink to &quot;**4. 点击劫持 (Clickjacking)**&quot;">​</a></h2><blockquote><p>点击劫持 (Clickjacking) 是一种欺骗攻击，攻击者在可信赖的页面上使用透明或半透明的覆盖层来欺骗用户点击他们所看到的以外的内容，例如按钮或链接。当用户点击覆盖层时，实际上点击的是攻击者精心设计的恶意内容，例如钓鱼网站或下载恶意软件的链接。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>利用透明层:</strong> 攻击者在可信赖的页面上使用透明层覆盖真正的链接或按钮。当用户点击页面时，实际上点击的是透明层中的恶意内容。</li><li><strong>利用 iframe:</strong> 攻击者在可信赖的页面中嵌入一个 iframe，iframe 的内容是一个精心设计的恶意页面。当用户点击页面时，实际上点击的是 iframe 中的恶意内容。</li><li><strong>利用 CSS 定位:</strong> 攻击者利用 CSS 定位技术将恶意内容定位在可信赖的页面之上。当用户点击页面时，实际上点击的是恶意内容。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>使用 X-Frame-Options 头:</strong> 在服务器端设置 X-Frame-Options 头，禁止其他网站嵌入本网站的页面。</li><li><strong>使用 Content Security Policy (CSP):</strong> CSP 是一种通过配置浏览器安全机制来限制网页中可执行内容的安全技术。</li><li><strong>避免使用透明层:</strong> 尽量避免在页面中使用透明层，如果必须使用，则需要仔细测试并确保透明层不会被攻击者利用。</li></ul><p><strong>示例:</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0.7;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击我&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/malicious_link&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;真正的链接&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>上述代码中，存在一个透明的覆盖层，覆盖了真正的链接。</li><li>当用户点击页面时，实际上点击的是覆盖层中的按钮，而不是真正的链接。</li><li>攻击者可以利用此漏洞来诱骗用户执行恶意操作，例如访问钓鱼网站或下载恶意软件。</li></ul><h2 id="_5-内容交付网络-cdn-劫持" tabindex="-1"><strong>5. 内容交付网络 (CDN) 劫持</strong> <a class="header-anchor" href="#_5-内容交付网络-cdn-劫持" aria-label="Permalink to &quot;**5. 内容交付网络 (CDN) 劫持**&quot;">​</a></h2><blockquote><p>内容交付网络 (CDN) 劫持是指攻击者劫持 CDN 节点，修改 CDN 上的库文件，在其中注入恶意代码，进而使应用程序的用户下载到这些恶意代码。CDN 劫持攻击通常利用 CDN 节点的安全漏洞或配置错误来实施。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>利用 CDN 节点漏洞:</strong> 攻击者利用 CDN 节点的漏洞，例如 SQL 注入、远程代码执行 (RCE) 等，获取对 CDN 节点的控制权。</li><li><strong>利用 CDN 配置错误:</strong> 攻击者利用 CDN 配置错误，例如未启用 SSL/TLS 加密、未配置访问控制等，将恶意代码注入到 CDN 节点上。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>使用 HTTPS 加密:</strong> 在 CDN 节点和用户浏览器之间使用 HTTPS 加密，可以防止攻击者窃取或篡改传输数据。</li><li><strong>使用内容完整性验证 (CV):</strong> 使用 CV 技术来确保 CDN 内容的完整性，防止恶意代码被注入。</li><li><strong>定期监控 CDN 节点:</strong> 定期监控 CDN 节点的安全状况，及时发现并修复安全漏洞。</li><li><strong>选择可靠的 CDN 服务商:</strong> 选择可靠的 CDN 服务商，可以降低被攻击的风险。</li></ul><h2 id="_6-https-降级" tabindex="-1"><strong>6. HTTPS 降级</strong> <a class="header-anchor" href="#_6-https-降级" aria-label="Permalink to &quot;**6. HTTPS 降级**&quot;">​</a></h2><blockquote><p>HTTPS 降级是指攻击者诱使用户使用不安全的 HTTP 连接访问应用程序，从而窃取用户敏感信息。HTTPS 是一种安全协议，可以对传输数据进行加密，防止攻击者窃取或篡改。然而，一些旧的浏览器或设备可能不支持 HTTPS，或者用户可能被攻击者诱骗使用不安全的 HTTP 连接。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>利用社会工程:</strong> 攻击者通过社交工程手段，例如钓鱼网站、虚假信息等，诱骗用户点击不安全的链接。</li><li><strong>利用浏览器漏洞:</strong> 攻击者利用浏览器漏洞，将用户重定向到不安全的 HTTP 连接。</li><li><strong>利用中间人攻击:</strong> 攻击者在用户和服务器之间进行拦截，将用户连接降级为不安全的 HTTP 连接。</li></ul><p><strong>防御措施:</strong></p><ul><li><strong>强制使用 HTTPS:</strong> 在服务器端强制使用 HTTPS 连接，并禁止 HTTP 连接。</li><li><strong>使用 HSTS 头:</strong> 在服务器端设置 HSTS 头，告诉浏览器始终使用 HTTPS 连接访问该网站。</li></ul><p><strong>示例:</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;访问网站&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面的链接使用不安全的 HTTP 协议，攻击者可以监听用户的网络流量，窃取用户 Cookie、表单数据等敏感信息。</p><h2 id="_7-中间人攻击" tabindex="-1"><strong>7. 中间人攻击</strong> <a class="header-anchor" href="#_7-中间人攻击" aria-label="Permalink to &quot;**7. 中间人攻击**&quot;">​</a></h2><blockquote><p>中间人攻击 (Man-in-the-Middle Attack) 是攻击者在用户和服务器之间进行拦截，窃取或篡改通信内容。中间人攻击通常利用不安全的网络连接或 Wi-Fi 热点来实施。</p></blockquote><p><strong>攻击方式:</strong></p><ul><li><strong>利用不安全的网络连接:</strong> 攻击者建立一个伪造的 Wi-Fi 热点，并诱骗用户连接。当用户通过伪造的 Wi-Fi 热点访问网站时，攻击者可以窃取用户发送到服务器的 Cookie、表单数据、登录凭证等敏感信息。</li><li><strong>利用 SSL/TLS 漏洞:</strong> 攻击者利用 SSL/TLS 协议的漏洞，例如心脏出血漏洞、POODLE 漏洞等，解密用户和服务器之间的通信内容。。</li></ul><p><strong>防御措施:</strong></p><p>为了防御中间人攻击，开发人员可以采取以下措施：</p><ul><li><strong>使用 HTTPS 加密:</strong> 在服务器端和用户浏览器之间使用 HTTPS 加密，可以防止攻击者窃取或篡改传输数据。</li><li><strong>使用公钥密码认证:</strong> 使用公钥密码认证可以确保通信双方身份的真实性，防止攻击者冒充服务器或用户进行攻击。</li><li><strong>安装杀毒软件和防火墙:</strong> 安装杀毒软件和防火墙可以帮助防御一些常见的中间人攻击。</li></ul>`,60)]))}const d=i(l,[["render",h]]);export{E as __pageData,d as default};
