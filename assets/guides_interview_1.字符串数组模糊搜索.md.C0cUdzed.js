import{_ as i,c as a,a0 as h,o as n}from"./chunks/framework.V6wbqQ68.js";const g=JSON.parse('{"title":"面试官：如何用 JavaScript 实现字符串数组模糊搜索？","description":"","frontmatter":{},"headers":[],"relativePath":"guides/interview/1.字符串数组模糊搜索.md","filePath":"guides/interview/1.字符串数组模糊搜索.md"}'),t={name:"guides/interview/1.字符串数组模糊搜索.md"};function k(p,s,l,e,r,E){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="面试官-如何用-javascript-实现字符串数组模糊搜索" tabindex="-1">面试官：如何用 JavaScript 实现字符串数组模糊搜索？ <a class="header-anchor" href="#面试官-如何用-javascript-实现字符串数组模糊搜索" aria-label="Permalink to &quot;面试官：如何用 JavaScript 实现字符串数组模糊搜索？&quot;">​</a></h1><p>你正在参加一场关键的技术面试，对面坐着一位经验丰富的面试官。他微笑着提出一个问题：“能否实现一个模糊搜索功能，用 JavaScript 来写？”这个问题看似简单，但它考验的不仅是你的编程技巧，还考察你在实际场景中解决问题的能力和思维方式。</p><p>为了帮助你在这种场景下表现出色，我将带你一起实现一个简单但有效的模糊搜索功能，并详细解释其中的关键点。掌握这项技术，不仅能让你在面试中脱颖而出，还能在实际工作中为用户提供更好的搜索体验。</p><h2 id="什么是模糊搜索" tabindex="-1">什么是模糊搜索？ <a class="header-anchor" href="#什么是模糊搜索" aria-label="Permalink to &quot;什么是模糊搜索？&quot;">​</a></h2><p>模糊搜索是一种技术，它允许你在文本中找到与用户输入接近的结果，即使输入中存在小的错误或字符顺序不完全匹配。这在处理用户可能拼错字或键入字符顺序不一致时特别有用。</p><h2 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h2><p>接下来，面试官给出了一组字符串数组，要求你在这个数组中实现模糊搜索。你开始思考，决定使用“滑动窗口”技术来解决这个问题。你在面试官的注视下开始编写代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JavaScript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TypeScript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Python&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Java&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ruby on Rails&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ReactJS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Angular&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Vue.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Node.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Django&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Spring Boot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Flask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Express.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>面试官点头示意你继续。你明白，要实现这个功能，关键在于编写一个能逐字符检查匹配的函数。于是你写下了如下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fuzzySearch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将字符串转换为小写，确保不区分大小写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同样转换查询字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastSearched </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query[i]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (current) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 !~ 来判断当前字符是否在目标字符串中按顺序出现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastSearched </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current, lastSearched </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果没找到，则返回 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找下一个字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果所有字符都找到，则返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="什么是滑动窗口" tabindex="-1">什么是滑动窗口？ <a class="header-anchor" href="#什么是滑动窗口" aria-label="Permalink to &quot;什么是滑动窗口？&quot;">​</a></h2><p>在编写代码的过程中，你停下来向面试官解释道，滑动窗口是一种常见的算法技巧，特别适用于字符串和数组的处理问题。滑动窗口的核心思想是在数据结构内保持一个“窗口”，逐步滑动窗口的位置进行检查或计算。</p><p>在 <code>fuzzySearch</code> 函数中，滑动窗口的概念被用来逐字符地在目标字符串中查找查询字符串中的字符。每次找到一个字符后，搜索的起始位置会向前移动，确保后续字符的匹配不会回到已经匹配过的位置，从而保证字符匹配的顺序性。</p><h2 id="代码解释" tabindex="-1">代码解释 <a class="header-anchor" href="#代码解释" aria-label="Permalink to &quot;代码解释&quot;">​</a></h2><p>接下来，你向面试官逐步解释了每一行代码的逻辑：</p><ul><li><strong>大小写转换</strong>：为了确保搜索时不受大小写影响，你将 <code>str</code> 和 <code>query</code> 都转换为小写。这是为了在比较时忽略大小写的差异。</li><li><strong>滑动窗口检查</strong>：通过一个循环，你逐个字符检查 <code>query</code> 中的字符是否按顺序出现在 <code>str</code> 中。每次匹配成功后，窗口（即搜索起点）向前滑动，以避免重复匹配之前的字符。</li><li><strong>关键操作符</strong> <code>!~</code>：你解释了 <code>!~</code> 操作符组合的作用。<code>indexOf</code> 返回字符的索引，如果未找到，则返回 <code>-1</code>。<code>~</code> 操作符将 <code>-1</code> 转为 <code>0</code>，而 <code>!</code> 操作符将 <code>0</code> 转为 <code>true</code>。这一行代码简洁地判断了字符是否存在于字符串中，并在未找到时直接返回 <code>false</code>。</li></ul><p>面试官显然对你的解释感到满意，你继续编写用于过滤整个数组的函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fuzzySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e, query)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 fuzzySearch 过滤数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后你运行了代码，并向面试官展示了模糊搜索的效果：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Java&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 [ &#39;JavaScript&#39;, &#39;Java&#39; ]</span></span></code></pre></div><p>面试官看了输出结果，点头称赞。他认可了你如何通过这个方法在字符串数组中实现了模糊搜索，并展示了实际效果。</p><p><strong>结束</strong></p><p>在这个面试场景中，你不仅展示了扎实的 JavaScript 基础，还通过简洁而高效的代码，解决了一个实际问题。你的表现让面试官印象深刻，这也证明了你在面对挑战时的思维方式和解决问题的能力。</p>`,23)]))}const y=i(t,[["render",k]]);export{g as __pageData,y as default};
