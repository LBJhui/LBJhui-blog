import{_ as i,c as t,a0 as a,o as e}from"./chunks/framework.V6wbqQ68.js";const c=JSON.parse('{"title":"第 12 章 BOM","description":"","frontmatter":{},"headers":[],"relativePath":"website/language/JavaScript/High-Performance JavaScript/第12章 BOM.md","filePath":"website/language/JavaScript/High-Performance JavaScript/第12章 BOM.md"}'),n={name:"website/language/JavaScript/High-Performance JavaScript/第12章 BOM.md"};function l(h,s,p,d,k,r){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="第-12-章-bom" tabindex="-1">第 12 章 BOM <a class="header-anchor" href="#第-12-章-bom" aria-label="Permalink to &quot;第 12 章 BOM&quot;">​</a></h1><h2 id="_12-1-window-对象" tabindex="-1">12.1 window 对象 <a class="header-anchor" href="#_12-1-window-对象" aria-label="Permalink to &quot;12.1 window 对象&quot;">​</a></h2><p><code>BOM</code> 的核心是 <code>window</code> 对象，表示浏览器的实例。<code>window</code> 对象在浏览器中有两重身份，一个是 ECMAScript 中的 <code>Global</code> 对象，另一个就是浏览器窗口的 JavaScript 接口。这意味着网页中定义的所有对象、变量和函数都以 <code>window</code> 作为其 <code>Global</code> 对象，都可以访问其上定义的 <code>parseInt()</code>等全局方法。</p><h3 id="_12-1-1-global-作用域" tabindex="-1">12.1.1 Global 作用域 <a class="header-anchor" href="#_12-1-1-global-作用域" aria-label="Permalink to &quot;12.1.1 Global 作用域&quot;">​</a></h3><p>因为 <code>window</code> 对象被复用为 ECMAScript 的 <code>Global</code> 对象，所以通过 <code>var</code> 声明的所有全局变量和函数都会变成 <code>window</code> 对象的属性和方法。如果在这里使用 <code>let</code> 或 <code>const</code> 替代 <code>var</code>，则不会把变量添加给全局对象。</p><p>另外，访问未声明的变量会抛出错误，但是可以在 <code>window</code> 对象上查询是否存在可能未声明的变量。比如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会导致抛出错误，因为oldValue没有声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldValue</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这不会抛出错误，因为这里是属性查询</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// newValue会被设置为undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.oldValue</span></span></code></pre></div><h3 id="_12-1-2-窗口关系" tabindex="-1">12.1.2 窗口关系 <a class="header-anchor" href="#_12-1-2-窗口关系" aria-label="Permalink to &quot;12.1.2 窗口关系&quot;">​</a></h3><p><code>top</code> 对象始终指向最上层（最外层）窗口，即浏览器窗口本身。而 <code>parent</code> 对象则始终指向当前窗口的父窗口。如果当前窗口是最上层窗口，则 <code>parent</code> 等于 <code>top</code>（都等于 <code>window</code>）​。最上层的 <code>window</code> 如果不是通过 <code>window.open()</code>打开的，那么其 <code>name</code> 属性就不会包含值。</p><p>还有一个 <code>self</code> 对象，它是终极 <code>window</code> 属性，始终会指向 <code>window</code>。实际上，<code>self</code> 和 <code>window</code> 就是同一个对象。之所以还要暴露 <code>self</code>，就是为了和 <code>top</code>、<code>parent</code> 保持一致。</p><p>这些属性都是 <code>window</code> 对象的属性，因此访问 <code>window.parent</code>、<code>window.top</code> 和 <code>window.self</code> 都可以。这意味着可以把访问多个窗口的 <code>window</code> 对象串联起来，比如 <code>window.parent.parent</code>。</p><h3 id="_12-1-3-窗口位置与像素比" tabindex="-1">12.1.3 窗口位置与像素比 <a class="header-anchor" href="#_12-1-3-窗口位置与像素比" aria-label="Permalink to &quot;12.1.3 窗口位置与像素比&quot;">​</a></h3><p><code>window</code> 对象的位置可以通过不同的属性和方法来确定。现代浏览器提供了 <code>screenLeft</code> 和 <code>screenTop</code> 属性，用于表示窗口相对于屏幕左侧和顶部的位置，返回值的单位是 CSS 像素。</p><p>可以使用 <code>moveTo()</code>和 <code>moveBy()</code>方法移动窗口。这两个方法都接收两个参数，其中 <code>moveTo()</code>接收要移动到的新位置的绝对坐标 <code>x</code> 和 <code>y</code>；而 <code>moveBy()</code>则接收相对当前位置在两个方向上移动的像素数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把窗口移动到左上角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把窗口向下移动100 像素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把窗口移动到坐标位置(200, 300)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把窗口向左移动50 像素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>依浏览器而定，以上方法可能会被部分或全部禁用。</p><p><strong>像素比</strong></p><p>CSS 像素是 Web 开发中使用的统一像素单位。这个单位的背后其实是一个角度：0.0213°。如果屏幕距离人眼是一臂长，则以这个角度计算的 CSS 像素大小约为 1/96 英寸。这样定义像素大小是为了在不同设备上统一标准。比如，低分辨率平板设备上 12 像素（CSS 像素）的文字应该与高清 4K 屏幕下 12 像素（CSS 像素）的文字具有相同大小。这就带来了一个问题，不同像素密度的屏幕下就会有不同的缩放系数，以便把物理像素（屏幕实际的分辨率）转换为 CSS 像素（浏览器报告的虚拟分辨率）​。</p><p><code>window.devicePixelRatio</code> 实际上与每英寸像素数（DPI, dots per inch）是对应的。DPI 表示单位像素密度，而 <code>window.devicePixelRatio</code> 表示物理像素与逻辑像素之间的缩放系数。</p><h3 id="_12-1-4-窗口大小" tabindex="-1">12.1.4 窗口大小 <a class="header-anchor" href="#_12-1-4-窗口大小" aria-label="Permalink to &quot;12.1.4 窗口大小&quot;">​</a></h3><p><code>outerWidth</code> 和 <code>outerHeight</code> 返回浏览器窗口自身的大小（不管是在最外层 window 上使用，还是在窗格<code>&lt;frame&gt;</code>中使用）​。<code>innerWidth</code> 和 <code>innerHeight</code> 返回浏览器窗口中页面视口的大小（不包含浏览器边框和工具栏）​。</p><p><code>document.documentElement.clientWidth</code> 和 <code>document.documentElement.clientHeight</code> 返回页面视口的宽度和高度。</p><p>浏览器窗口自身的精确尺寸不好确定，但可以确定页面视口的大小，如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerWidth,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerHeight</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (document.compatMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CSS1Compat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.clientWidth</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body.clientHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里，先将 <code>pageWidth</code> 和 <code>pageHeight</code> 的值分别设置为 <code>window.innerWidth</code> 和 <code>window.innerHeight</code>。然后，检查 pageWidth 是不是一个数值，如果不是则通过 <code>document.compatMode</code> 来检查页面是否处于标准模式。如果是，则使用 <code>document.documentElement.clientWidth</code> 和 <code>document.documentElement.clientHeight</code>；否则，就使用 <code>document.body.clientWidth</code> 和 <code>document.body.clientHeight</code>。</p><p>可以使用 <code>resizeTo()</code>和 <code>resizeBy()</code>方法调整窗口大小。这两个方法都接收两个参数，<code>resizeTo()</code>接收新的宽度和高度值，而 <code>resizeBy()</code>接收宽度和高度各要缩放多少。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缩放到100×100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缩放到200×150</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缩放到300×300</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>与移动窗口的方法一样，缩放窗口的方法可能会被浏览器禁用，而且在某些浏览器中默认是禁用的。同样，缩放窗口的方法只能应用到最上层的 <code>window</code> 对象。</p><h3 id="_12-1-5-视口位置" tabindex="-1">12.1.5 视口位置 <a class="header-anchor" href="#_12-1-5-视口位置" aria-label="Permalink to &quot;12.1.5 视口位置&quot;">​</a></h3><p>浏览器窗口尺寸通常无法满足完整显示整个页面，为此用户可以通过滚动在有限的视口中查看文档。度量文档相对于视口滚动距离的属性有两对，返回相等的值：<code>window.pageXoffset</code>/<code>window.scrollX</code> 和 <code>window.pageYoffset</code>/<code>window.scrollY</code>。</p><p>可以使用 <code>scroll()</code>、<code>scrollTo()</code>和 <code>scrollBy()</code>方法滚动页面。这 3 个方法都接收表示相对视口距离的 <code>x</code> 和 <code>y</code> 坐标，这两个参数在前两个方法中表示要滚动到的坐标，在最后一个方法中表示滚动的距离。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相对于当前视口向下滚动 100 像素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相对于当前视口向右滚动 40 像素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 滚动到页面左上角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 滚动到距离屏幕左边及顶边各 100 像素的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这几个方法也都接收一个 <code>ScrollToOptions</code> 字典，除了提供偏移值，还可以通过 <code>behavior</code> 属性告诉浏览器是否平滑滚动。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正常滚动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 平滑滚动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behavior: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;smooth&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_12-1-6-导航与打开新窗口" tabindex="-1">12.1.6 导航与打开新窗口 <a class="header-anchor" href="#_12-1-6-导航与打开新窗口" aria-label="Permalink to &quot;12.1.6 导航与打开新窗口&quot;">​</a></h3><p><code>window.open()</code>方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法接收 4 个参数：要加载的 URL、目标窗口、特性字符串和表示新窗口在浏览器历史记录中是否替代当前加载页面的布尔值。通常，调用这个方法时只传前 3 个参数，最后一个参数只有在不打开新窗口时才会使用。</p><p>如果 <code>window.open()</code>的第二个参数是一个已经存在的窗口或窗格（<code>frame</code>）的名字，则会在对应的窗口或窗格中打开 URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与&lt;a href=&quot;http://www.wrox.com&quot; target=&quot;topFrame&quot;/&gt;相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.wrox.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;topFrame&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>执行这行代码的结果就如同用户点击了一个 <code>href</code> 属性为<code>&quot;http://www.wrox.com&quot;</code>,<code>target</code>属性为<code>&quot;topFrame&quot;</code>的链接。如果有一个窗口名叫<code>&quot;topFrame&quot;</code>，则这个窗口就会打开这个 URL；否则就会打开一个新窗口并将其命名为<code>&quot;topFrame&quot;</code>。第二个参数也可以是一个特殊的窗口名，比如<code>_self</code>、<code>_parent</code>、<code>_top</code>或<code>_blank</code>。</p><h4 id="_1-弹出窗口" tabindex="-1">1．弹出窗口 <a class="header-anchor" href="#_1-弹出窗口" aria-label="Permalink to &quot;1．弹出窗口&quot;">​</a></h4><p>如果 <code>window.open()</code>的第二个参数不是已有窗口，则会打开一个新窗口或标签页。第三个参数，即特性字符串，用于指定新窗口的配置。如果没有传第三个参数，则新窗口（或标签页）会带有所有默认的浏览器特性（工具栏、地址栏、状态栏等都是默认配置）​。如果打开的不是新窗口，则忽略第三个参数。</p><p>特性字符串是一个逗号分隔的设置字符串，用于指定新窗口包含的特性。下表列出了一些选项。</p><table tabindex="0"><thead><tr><th style="text-align:center;">设置</th><th style="text-align:center;">值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">fullscreen</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示新窗口是否最大化。仅限 IE 支持</td></tr><tr><td style="text-align:center;">height</td><td style="text-align:center;">数值</td><td style="text-align:center;">新窗口高度。这个值不能小于 100</td></tr><tr><td style="text-align:center;">left</td><td style="text-align:center;">数值</td><td style="text-align:center;">新窗口的 x 轴坐标。这个值不能是负值</td></tr><tr><td style="text-align:center;">location</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否显示地址栏。不同浏览器的默认值也不一样。在设置为 &quot;no&quot; 时，地址栏可能隐藏或禁用（取决于浏览器）</td></tr><tr><td style="text-align:center;">Menubar</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否显示菜单栏。默认为 &quot;no&quot;</td></tr><tr><td style="text-align:center;">resizable</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否可以拖动改变新窗口大小。默认为 &quot;no&quot; 默认为 &quot;no&quot;</td></tr><tr><td style="text-align:center;">scrollbars</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否可以在内容过长时滚动。默认为 &quot;no&quot;</td></tr><tr><td style="text-align:center;">status</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否显示状态栏。不同浏览器的默认值也不一样</td></tr><tr><td style="text-align:center;">toolbar</td><td style="text-align:center;">&quot;yes&quot; 或 &quot;no&quot;</td><td style="text-align:center;">表示是否显示工具栏。默认为 &quot;no&quot;</td></tr><tr><td style="text-align:center;">top</td><td style="text-align:center;">数值</td><td style="text-align:center;">新窗口的 y 轴坐标。这个值不能是负值</td></tr><tr><td style="text-align:center;">width</td><td style="text-align:center;">数值</td><td style="text-align:center;">新窗口的宽度。这个值不能小于 100</td></tr></tbody></table><p>这些设置需要以逗号分隔的名值对形式出现，其中名值对以等号连接。​（特性字符串中不能包含空格。​）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.wrox.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wroxWindow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;height=400, width=400, top=10, left=10, resizable=yes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>window.open()</code>方法返回一个对新建窗口的引用。这个对象与普通 <code>window</code> 对象没有区别，只是为控制新窗口提供了方便。例如，某些浏览器默认不允许缩放或移动主窗口，但可能允许缩放或移动通过 <code>window.open()</code>创建的窗口。跟使用任何 <code>window</code> 对象一样，可以使用这个对象操纵新打开的窗口。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wroxWin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.wrox.com/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wroxWindow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;height=400, width=400, top=10, left=10, resizable=yes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缩放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wroxWin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wroxWin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>新创建窗口的 <code>window</code> 对象有一个属性 <code>opener</code>，指向打开它的窗口。这个属性只在弹出窗口的最上层 <code>window</code> 对象（top）有定义，是指向调用 <code>window.open()</code>打开它的窗口或窗格的指针。窗口不会跟踪记录自己打开的新窗口，因此开发者需要自己记录。</p><p>在某些浏览器中，每个标签页会运行在独立的进程中。如果一个标签页打开了另一个，而 <code>window</code> 对象需要跟另一个标签页通信，那么标签便不能运行在独立的进程中。在这些浏览器中，可以将新打开的标签页的 <code>opener</code> 属性设置为 <code>null</code>，表示新打开的标签页可以运行在独立的进程中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wroxWin.opener </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span></code></pre></div><p>把 <code>opener</code> 设置为 <code>null</code> 表示新打开的标签页不需要与打开它的标签页通信，因此可以在独立进程中运行。这个连接一旦切断，就无法恢复了。</p><h4 id="_2-安全限制" tabindex="-1">2．安全限制 <a class="header-anchor" href="#_2-安全限制" aria-label="Permalink to &quot;2．安全限制&quot;">​</a></h4><h4 id="_3-弹窗屏蔽程序" tabindex="-1">3．弹窗屏蔽程序 <a class="header-anchor" href="#_3-弹窗屏蔽程序" aria-label="Permalink to &quot;3．弹窗屏蔽程序&quot;">​</a></h4><p>所有现代浏览器都内置了屏蔽弹窗的程序，因此大多数意料之外的弹窗都会被屏蔽。在浏览器屏蔽弹窗时，可能会发生一些事。如果浏览器内置的弹窗屏蔽程序阻止了弹窗，那么 <code>window.open()</code>很可能会返回 <code>null</code>。此时，只要检查这个方法的返回值就可以知道弹窗是否被屏蔽了。</p><p>在浏览器扩展或其他程序屏蔽弹窗时，<code>window.open()</code>通常会抛出错误。因此要准确检测弹窗是否被屏蔽，除了检测 <code>window.open()</code>的返回值，还要把它用 <code>try/catch</code> 包装起来，像这样：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">letblocked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wroxWin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.wrox.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_blank&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (wroxWin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    blocked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ex) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  blocked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (blocked) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Thepopupwasblocked!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>无论弹窗是用什么方法屏蔽的，以上代码都可以准确判断调用 <code>window.open()</code>的弹窗是否被屏蔽了。</p><h3 id="_12-1-7-定时器" tabindex="-1">12.1.7 定时器 <a class="header-anchor" href="#_12-1-7-定时器" aria-label="Permalink to &quot;12.1.7 定时器&quot;">​</a></h3><p><code>setTimeout()</code>用于指定在一定时间后执行某些代码，而 <code>setInterval()</code>用于指定每隔一段时间执行某些代码。</p><p><code>setTimeout()</code>方法通常接收两个参数：要执行的代码和在执行回调函数前等待的时间（毫秒）​。第一个参数可以是包含 JavaScript 代码的字符串（类似于传给 <code>eval()</code>的字符串）或者一个函数，第二个参数是要等待的毫秒数，而不是要执行代码的确切时间。</p><p>JavaScript 是单线程的，所以每次只能执行一段代码。为了调度不同代码的执行，JavaScript 维护了一个任务队列。其中的任务会按照添加到队列的先后顺序执行。<code>setTimeout()</code>的第二个参数只是告诉 JavaScript 引擎在指定的毫秒数过后把任务添加到这个队列。如果队列是空的，则会立即执行该代码。如果队列不是空的，则代码必须等待前面的任务执行完才能执行。</p><p>调用 <code>setTimeout()</code>时，会返回一个表示该超时排期的数值 ID。这个超时 ID 是被排期执行代码的唯一标识符，可用于取消该任务。要取消等待中的排期任务，可以调用 <code>clearTimeout()</code>方法并传入超时 ID。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置超时任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeoutId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消超时任务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeoutId)</span></span></code></pre></div><p>只要是在指定时间到达之前调用 <code>clearTimeout()</code>，就可以取消超时任务。在任务执行后再调用 <code>clearTimeout()</code>没有效果。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>所有超时执行的代码（函数）都会在全局作用域中的一个匿名函数中运行，因此函数中的 <code>this</code> 值在非严格模式下始终指向 <code>window</code>，而在严格模式下是 <code>undefined</code>。如果给 <code>setTimeout()</code>提供了一个箭头函数，那么 <code>this</code> 会保留为定义它时所在的词汇作用域。</p></div><p><code>setInterval()</code>与 <code>setTimeout()</code>的使用方法类似，只不过指定的任务会每隔指定时间就执行一次，直到取消循环定时或者页面卸载。<code>setInterval()</code>同样可以接收两个参数：要执行的代码（字符串或函数）​，以及把下一次执行定时代码的任务添加到队列要等待的时间（毫秒）​。</p><p><code>setInterval()</code>方法也会返回一个循环定时 ID，可以用于在未来某个时间点上取消循环定时。要取消循环定时，可以调用 <code>clearInterval()</code>并传入定时 ID。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>在使用 <code>setTimeout()</code>时，不一定要记录超时 ID，因为它会在条件满足时自动停止，否则会自动设置另一个超时任务。这个模式是设置循环任务的推荐做法。<code>setIntervale()</code>在实践中很少会在生产环境下使用，因为一个任务结束和下一个任务开始之间的时间间隔是无法保证的，有些循环定时任务可能会因此而被跳过。而像前面这个例子中一样使用 <code>setTimeout()</code>则能确保不会出现这种情况。一般来说，最好不要使用 <code>setInterval()</code>。</p></div><h3 id="_12-1-8-系统对话框" tabindex="-1">12.1.8 系统对话框 <a class="header-anchor" href="#_12-1-8-系统对话框" aria-label="Permalink to &quot;12.1.8 系统对话框&quot;">​</a></h3><p>使用 <code>alert()</code>、<code>confirm()</code>和 <code>prompt()</code>方法，可以让浏览器调用系统对话框向用户显示消息。这些对话框都是同步的模态对话框，即在它们显示的时候，代码会停止执行，在它们消失以后，代码才会恢复执行。</p><p><em>警告框</em>：<code>alert()</code>只接收一个参数。调用 <code>alert()</code>时，传入的字符串会显示在一个系统对话框中。对话框只有一个“OK”​（确定）按钮。如果传给 <code>alert()</code>的参数不是一个原始字符串，则会调用这个值的 <code>toString()</code>方法将其转换为字符串。</p><p><em>确认框</em>：通过调用 <code>confirm()</code>来显示。确认框跟警告框类似，都会向用户显示消息。但不同之处在于，确认框有两个按钮：​“Cancel”​（取消）和“OK”​（确定）​。用户通过单击不同的按钮表明希望接下来执行什么操作。</p><p>要知道用户单击了 OK 按钮还是 Cancel 按钮，可以判断 confirm()<code>方法的返回值：</code>true<code> 表示单击了 OK 按钮，</code>false\` 表示单击了 Cancel 按钮或者通过单击某一角上的 X 图标关闭了确认框。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Are you sure? &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m so glad you&#39;re sure! &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m sorry to hear you&#39;re not sure.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>提示框</em>：通过调用 <code>prompt()</code>方法来显示。提示框的用途是提示用户输入消息。除了 OK 和 Cancel 按钮，提示框还会显示一个文本框，让用户输入内容。<code>prompt()</code>方法接收两个参数：要显示给用户的文本，以及文本框的默认值（可以是空字符串）​。</p><p>如果用户单击了 OK 按钮，则 <code>prompt()</code>会返回文本框中的值。如果用户单击了 Cancel 按钮，或者对话框被关闭，则 <code>prompt()</code>会返回 <code>null</code>。</p><p>很多浏览器针对这些系统对话框添加了特殊功能。如果网页中的脚本生成了两个或更多系统对话框，则除第一个之外所有后续的对话框上都会显示一个复选框，如果用户选中则会禁用后续的弹框，直到页面刷新。</p><p>如果用户选中了复选框并关闭了对话框，在页面刷新之前，所有系统对话框（警告框、确认框、提示框）都会被屏蔽。开发者无法获悉这些对话框是否显示了。对话框计数器会在浏览器空闲时重置，因此如果两次独立的用户操作分别产生了两个警告框，则两个警告框上都不会显示屏蔽复选框。如果一次独立的用户操作连续产生了两个警告框，则第二个警告框会显示复选框。</p><p>JavaScript 还可以显示另外两种对话框：<code>find()</code>和 <code>print()</code>。这两种对话框都是异步显示的，即控制权会立即返回给脚本。用户在浏览器菜单上选择“查找”​（find）和“打印”​（print）时显示的就是这两种对话框。通过在 <code>window</code> 对象上调用 <code>find()</code>和 <code>print()</code>可以显示它们</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示打印对话框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示查找对话框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>这两个方法不会返回任何有关用户在对话框中执行了什么操作的信息，因此很难加以利用。此外，因为这两种对话框是异步的，所以浏览器的对话框计数器不会涉及它们，而且用户选择禁用对话框对它们也没有影响。</p><h2 id="_12-2-location-对象" tabindex="-1">12.2 location 对象 <a class="header-anchor" href="#_12-2-location-对象" aria-label="Permalink to &quot;12.2 location 对象&quot;">​</a></h2><p><code>location</code> 是最有用的 <code>BOM</code> 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。这个对象独特的地方在于，它既是 <code>window</code> 的属性，也是 <code>document</code> 的属性。也就是说，<code>window.location</code> 和 <code>document.location</code> 指向同一个对象。<code>location</code> 对象不仅保存着当前加载文档的信息，也保存着把 URL 解析为离散片段后能够通过属性访问的信息。</p><p>假设浏览器当前加载的 URL 是 <a href="http://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents" target="_blank" rel="noreferrer">http://foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents</a>, location 对象的内容如下表所示。</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">location.hash</td><td style="text-align:center;">&quot;#contents&quot;</td><td style="text-align:center;">URL 散列值（井号后跟零或多个字符），如果没有则为空字符串</td></tr><tr><td style="text-align:center;">location.host</td><td style="text-align:center;">&quot;www.wrox.com:80&quot;</td><td style="text-align:center;">服务器名及端口号</td></tr><tr><td style="text-align:center;">location.hostname</td><td style="text-align:center;">&quot;www.wrox.com&quot;</td><td style="text-align:center;">服务器名</td></tr><tr><td style="text-align:center;">location.href</td><td style="text-align:center;">&quot;<a href="http://www.wrox.com:80/WileyCDA/?q=javascript#contents" target="_blank" rel="noreferrer">http://www.wrox.com:80/WileyCDA/?q=javascript#contents</a>&quot;</td><td style="text-align:center;">当前加载页面的完整 URL。location 的 toString()方法也会返回这个值</td></tr><tr><td style="text-align:center;">location.pathname</td><td style="text-align:center;">&quot;/WileyCDA/&quot;</td><td style="text-align:center;">URL 中的路径和(或)文件名</td></tr><tr><td style="text-align:center;">location.port</td><td style="text-align:center;">&quot;80&quot;</td><td style="text-align:center;">请求的端口。如果 URL 中没有端口，则返回空字符串</td></tr><tr><td style="text-align:center;">location.protocol</td><td style="text-align:center;">&quot;http:&quot;</td><td style="text-align:center;">页面使用的协议。</td></tr><tr><td style="text-align:center;">location.search</td><td style="text-align:center;">&quot;?q=javascript&quot;</td><td style="text-align:center;">URL 的查询字符串。这个字符串以问号开头</td></tr><tr><td style="text-align:center;">location.username</td><td style="text-align:center;">&quot;foouser&quot;</td><td style="text-align:center;">域名前指定的用户名</td></tr><tr><td style="text-align:center;">location.password</td><td style="text-align:center;">&quot;barpassword&quot;</td><td style="text-align:center;">域名前指定的密码</td></tr><tr><td style="text-align:center;">location.origin</td><td style="text-align:center;">&quot;<a href="http://www.worx.com" target="_blank" rel="noreferrer">http://www.worx.com</a>&quot;</td><td style="text-align:center;">URL 的源地址。只读</td></tr></tbody></table><h3 id="_12-2-1-查询字符串" tabindex="-1">12.2.1 查询字符串 <a class="header-anchor" href="#_12-2-1-查询字符串" aria-label="Permalink to &quot;12.2.1 查询字符串&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getQueryStringArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 取得没有开头问号的查询字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location.search.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> location.search.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 保存数据的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 把每个参数添加到args对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;=&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      args[name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>URLSearchParams</code> 提供了一组标准 API 方法，通过它们可以检查和修改查询字符串。给 URLSearchParams 构造函数传入一个查询字符串，就可以创建一个实例。这个实例上暴露了 <code>get()</code>、<code>set()</code>和 <code>delete()</code>等方法，可以对查询字符串执行相应操作。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;?q=javascript&amp;num=10&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searchParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLSearchParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;q=javascript&amp;num=10&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;num&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;num&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;10&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;q=javascript&amp;num=10&amp;page=3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;num=10&amp;page=3&#39;</span></span></code></pre></div><p>大多数支持 <code>URLSearchParams</code> 的浏览器也支持将 <code>URLSearchParams</code> 的实例用作可迭代对象：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;? q=javascript&amp;num=10&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searchParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLSearchParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searchParams) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;q&quot;, &quot;javascript&quot;] [&quot;num&quot;, &quot;10&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_12-2-2-操作地址" tabindex="-1">12.2.2 操作地址 <a class="header-anchor" href="#_12-2-2-操作地址" aria-label="Permalink to &quot;12.2.2 操作地址&quot;">​</a></h3><p>可以通过修改 <code>location</code> 对象修改浏览器的地址。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.wrox.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://www.wrox.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://www.wrox.com&#39;</span></span></code></pre></div><p>修改 <code>location</code> 对象的属性也会修改当前加载的页面。其中，<code>hash</code>、<code>search</code>、<code>hostname</code>、<code>pathname</code> 和 <code>port</code> 属性被设置为新值之后都会修改当前 URL。除了 <code>hash</code> 之外，只要修改 <code>location</code> 的一个属性，就会导致页面重新加载新 URL。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>修改 <code>hash</code> 的值会在浏览器历史中增加一条新记录。在早期的 IE 中，点击“后退”和“前进”按钮不会更新 hash 属性，只有点击包含散列的 URL 才会更新 <code>hash</code> 的值。</p></div><p>在以前面提到的方式修改 URL 之后，浏览器历史记录中就会增加相应的记录。当用户单击“后退”按钮时，就会导航到前一个页面。如果不希望增加历史记录，可以使用 <code>replace()</code>方法。这个方法接收一个 URL 参数，但重新加载后不会增加历史记录。调用 <code>replace()</code>之后，用户不能回到前一页。</p><p>最后一个修改地址的方法是 <code>reload()</code>，它能重新加载当前显示的页面。调用 <code>reload()</code>而不传参数，页面会以最有效的方式重新加载。也就是说，如果页面自上次请求以来没有修改过，浏览器可能会从缓存中加载页面。如果想强制从服务器重新加载，可以像下面这样给 <code>reload()</code>传个 <code>true</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新加载，可能是从缓存加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重新加载，从服务器加载</span></span></code></pre></div><p>脚本中位于 <code>reload()</code>调用之后的代码可能执行也可能不执行，这取决于网络延迟和系统资源等因素。为此，最好把 <code>reload()</code>作为最后一行代码。</p><h2 id="_12-3-navigator-对象" tabindex="-1">12.3 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator" target="_blank" rel="noreferrer">navigator 对象</a> <a class="header-anchor" href="#_12-3-navigator-对象" aria-label="Permalink to &quot;12.3 [navigator 对象](https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator)&quot;">​</a></h2><p>只要浏览器启用 JavaScript, <code>navigator</code> 对象就一定存在。但是与其他 <code>BOM</code> 对象一样，每个浏览器都支持自己的属性。</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性/方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">bluetooth</td><td style="text-align:center;">返回一个当前文档的 Bluetooth 对象，提供对 web 蓝牙 API 功能的访问</td></tr><tr><td style="text-align:center;">clipboard</td><td style="text-align:center;">返回一个用于读写访问系统剪贴板内容的 Clipboard 对象</td></tr><tr><td style="text-align:center;">contacts</td><td style="text-align:center;">返回一个 ContactsManager 接口，允许用户从他们的联系人列表中选择条目，并与网站或应用程序共享所选条目的有限详细信息</td></tr><tr><td style="text-align:center;">gpu</td><td style="text-align:center;">返回当前浏览上下文的 GPU 对象。是 WebGPU API 的入口点</td></tr><tr><td style="text-align:center;">activeVrDisplays</td><td style="text-align:center;">返回数组，包含 ispresenting 属性为 true 的 VRDisplay 实例</td></tr><tr><td style="text-align:center;">appCodeName</td><td style="text-align:center;">即使在非 Mozilla 浏览器中也会返回&#39;Mozilla&#39;</td></tr><tr><td style="text-align:center;">appName</td><td style="text-align:center;">浏览器全名</td></tr><tr><td style="text-align:center;">appVersion</td><td style="text-align:center;">浏览器版本。通常与实际的浏览器版本不一致</td></tr><tr><td style="text-align:center;">battery</td><td style="text-align:center;">返回暴露 Battery Status API 的 batteryManager 对象</td></tr><tr><td style="text-align:center;">buildId</td><td style="text-align:center;">浏览器的构建编号</td></tr><tr><td style="text-align:center;">connection</td><td style="text-align:center;">返回暴露 Network Information API 的 NetworkInformation 对象</td></tr><tr><td style="text-align:center;">cookiesEnabled</td><td style="text-align:center;">返回布尔值，表示是否启用了 cookie</td></tr><tr><td style="text-align:center;">credential</td><td style="text-align:center;">返回暴露 Credential Management API 的 CredentialsContainer 对象</td></tr><tr><td style="text-align:center;">deviceMemory</td><td style="text-align:center;">返回单位为 GB 的设备内存容量</td></tr><tr><td style="text-align:center;">doNotTrack</td><td style="text-align:center;">返回用户的“不跟踪”（do-not-track）设置</td></tr><tr><td style="text-align:center;">geolocation</td><td style="text-align:center;">返回暴露 Geolocation API 的 Geolocation 对象</td></tr><tr><td style="text-align:center;">getVRDisplays()</td><td style="text-align:center;">返回数组，包含可用的每个 VRDisplay 实例</td></tr><tr><td style="text-align:center;">getUserMedia()</td><td style="text-align:center;">返回与可用媒体设备硬件关联的流</td></tr><tr><td style="text-align:center;">hardwareConcurrency</td><td style="text-align:center;">返回设备的处理器核心数量</td></tr><tr><td style="text-align:center;">javaEnabled()[弃用]</td><td style="text-align:center;">返回布尔值，表示浏览器是否启用了 Java，始终返回 false</td></tr><tr><td style="text-align:center;">language</td><td style="text-align:center;">返回浏览器的主语言</td></tr><tr><td style="text-align:center;">languages</td><td style="text-align:center;">返回浏览器的偏好语言数组</td></tr><tr><td style="text-align:center;">locks</td><td style="text-align:center;">返回暴露 Web Locks API 的 LockManager 对象</td></tr><tr><td style="text-align:center;">mediaCapabilities</td><td style="text-align:center;">返回暴露 Media Capabilities API 的 MediaCapabilities 对象</td></tr><tr><td style="text-align:center;">mediaDevices</td><td style="text-align:center;">返回可用的媒体设备</td></tr><tr><td style="text-align:center;">maxTouchPoints</td><td style="text-align:center;">返回设备触摸屏支持的最大触点数</td></tr><tr><td style="text-align:center;">mimeTypes</td><td style="text-align:center;">返回浏览器中注册的 MIME 类型数组</td></tr><tr><td style="text-align:center;">onLine</td><td style="text-align:center;">返回布尔值，表示浏览器是否联网</td></tr><tr><td style="text-align:center;">oscpu</td><td style="text-align:center;">返回浏览器运行设备的操作系统和（或）CPU</td></tr><tr><td style="text-align:center;">permissions</td><td style="text-align:center;">返回暴露 Permissions API 的 Permissions 对象</td></tr><tr><td style="text-align:center;">platform</td><td style="text-align:center;">返回浏览器运行的系统平台</td></tr><tr><td style="text-align:center;">plugins</td><td style="text-align:center;">返回浏览器安装的插件数组。在 IE 中，这个数组包含页面中所有 <code>&lt;embed&gt;</code> 元素</td></tr><tr><td style="text-align:center;">product</td><td style="text-align:center;">返回产品名称（通常是 &quot;Gecko&quot;）</td></tr><tr><td style="text-align:center;">productSub</td><td style="text-align:center;">返回产品的额外信息（通常是 Gecko 的版本）</td></tr><tr><td style="text-align:center;">registerProtocolHandler()</td><td style="text-align:center;">将一个网站注册为特定协议的处理程序</td></tr><tr><td style="text-align:center;">requestMediaKeySyatemAccess()</td><td style="text-align:center;">返回一个期约，解决为 MediaKeySystemAccess 对象</td></tr><tr><td style="text-align:center;">sendBeacon()</td><td style="text-align:center;">异步传输一些小数据</td></tr><tr><td style="text-align:center;">serviceWorker</td><td style="text-align:center;">返回用来与 ServiceWorker 实例交互的 ServiceWorkerContainer</td></tr><tr><td style="text-align:center;">share()</td><td style="text-align:center;">返回当前平台的原生共享机制</td></tr><tr><td style="text-align:center;">storage</td><td style="text-align:center;">返回暴露 Storeage API 的 StorageManager 对象</td></tr><tr><td style="text-align:center;">userAgent</td><td style="text-align:center;">返回浏览器的用户代理字符串</td></tr><tr><td style="text-align:center;">vendor</td><td style="text-align:center;">返回浏览器的厂商名称</td></tr><tr><td style="text-align:center;">vendorSub</td><td style="text-align:center;">返回浏览器厂商的更多信息</td></tr><tr><td style="text-align:center;">vibrate()</td><td style="text-align:center;">触发设备振动</td></tr><tr><td style="text-align:center;">webdriver</td><td style="text-align:center;">返回浏览器当前是否被自动化程序控制</td></tr></tbody></table><h3 id="_12-3-1-检测插件-弃用" tabindex="-1">12.3.1 检测插件(弃用) <a class="header-anchor" href="#_12-3-1-检测插件-弃用" aria-label="Permalink to &quot;12.3.1 检测插件(弃用)&quot;">​</a></h3><h3 id="_12-3-2-注册处理程序" tabindex="-1">12.3.2 注册处理程序 <a class="header-anchor" href="#_12-3-2-注册处理程序" aria-label="Permalink to &quot;12.3.2 注册处理程序&quot;">​</a></h3><p>现代浏览器支持 <code>navigator</code> 上的（在 HTML5 中定义的）<code>registerProtocolHandler()</code>方法。这个方法可以把一个网站注册为处理某种特定类型信息应用程序。随着在线 RSS 阅读器和电子邮件客户端的流行，可以借助这个方法将 Web 应用程序注册为像桌面软件一样的默认应用程序。</p><p>要使用 <code>registerProtocolHandler()</code>方法，必须传入 3 个参数：要处理的协议（如&quot;<code>mailto</code>&quot;或&quot;<code>ftp</code>&quot;）​、处理该协议的 URL，以及应用名称。比如，要把一个 Web 应用程序注册为默认邮件客户端，可以这样做：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerProtocolHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mailto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.somemailclient.com?cmd=%s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Some Mail Client&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个例子为&quot;mailto&quot;协议注册了一个处理程序，这样邮件地址就可以通过指定的 Web 应用程序打开。注意，第二个参数是负责处理请求的 URL, %s 表示原始的请求。</p><h2 id="_12-4-screen-对象" tabindex="-1">12.4 screen 对象 <a class="header-anchor" href="#_12-4-screen-对象" aria-label="Permalink to &quot;12.4 screen 对象&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">availHeight</td><td style="text-align:center;">屏幕像素高度减去系统组件高度</td></tr><tr><td style="text-align:center;">availLeft</td><td style="text-align:center;">返回屏幕左边边界的第一个像素点</td></tr><tr><td style="text-align:center;">availTop</td><td style="text-align:center;">没有被系统组件占用的屏幕最顶端像素</td></tr><tr><td style="text-align:center;">availWidth</td><td style="text-align:center;">返回窗口中水平方向可用空间的像素值</td></tr><tr><td style="text-align:center;">colorDepth</td><td style="text-align:center;">返回屏幕的色彩深度</td></tr><tr><td style="text-align:center;">height</td><td style="text-align:center;">以像素为单位返回屏幕的高度</td></tr><tr><td style="text-align:center;">left</td><td style="text-align:center;">返回从最左边界到当前屏幕的像素值</td></tr><tr><td style="text-align:center;">pixelDepth</td><td style="text-align:center;">获取屏幕的像素点</td></tr><tr><td style="text-align:center;">top</td><td style="text-align:center;">返回最上边界到当前屏幕的像素值</td></tr><tr><td style="text-align:center;">width</td><td style="text-align:center;">返回屏幕的宽度</td></tr><tr><td style="text-align:center;">orientation</td><td style="text-align:center;">返回当前屏幕的转向</td></tr></tbody></table><h2 id="_12-5-history-对象" tabindex="-1">12.5 history 对象 <a class="header-anchor" href="#_12-5-history-对象" aria-label="Permalink to &quot;12.5 history 对象&quot;">​</a></h2><p><code>history</code> 对象表示当前窗口首次使用以来用户的导航历史记录。因为 <code>history</code> 是 <code>window</code> 的属性，所以每个 <code>window</code> 都有自己的 <code>history</code> 对象。出于安全考虑，这个对象不会暴露用户访问过的 URL，但可以通过它在不知道实际 URL 的情况下前进和后退。</p><h3 id="_12-5-1-导航" tabindex="-1">12.5.1 导航 <a class="header-anchor" href="#_12-5-1-导航" aria-label="Permalink to &quot;12.5.1 导航&quot;">​</a></h3><p><code>go()</code>方法可以在用户历史记录中沿任何方向导航，可以前进也可以后退。这个方法只接收一个参数，这个参数可以是一个整数，表示前进或后退多少步。负值表示在历史记录中后退（类似点击浏览器的“后退”按钮）​，而正值表示在历史记录中前进（类似点击浏览器的“前进”按钮）​。以下任意一条语句都会重新加载当前页面：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>go()</code>有两个简写方法：<code>back()</code>和 <code>forward()</code>。顾名思义，这两个方法模拟了浏览器的后退按钮和前进按钮。</p><p><code>history</code> 对象还有一个 <code>length</code> 属性，表示历史记录中有多个条目。这个属性反映了历史记录的数量，包括可以前进和后退的页面。对于窗口或标签页中加载的第一个页面，<code>history.length</code> 等于 1。</p><h3 id="_12-5-2-历史状态管理" tabindex="-1">12.5.2 历史状态管理 <a class="header-anchor" href="#_12-5-2-历史状态管理" aria-label="Permalink to &quot;12.5.2 历史状态管理&quot;">​</a></h3><p><code>hashchange</code> 会在页面 URL 的散列变化时被触发，开发者可以在此时执行某些操作。而状态管理 API 则可以让开发者改变浏览器 URL 而不会加载新页面。为此，可以使用 <code>history.pushState()</code>方法。这个方法接收 3 个参数：一个 state 对象、一个新状态的标题和一个（可选的）相对 URL。</p><p>因为 <code>pushState()</code>会创建新的历史记录，所以也会相应地启用“后退”按钮。此时单击“后退”按钮，就会触发 <code>window</code> 对象上的 <code>popstate</code> 事件。<code>popstate</code> 事件的事件对象有一个 <code>state</code> 属性，其中包含通过 <code>pushState()</code>第一个参数传入的 <code>state</code> 对象</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stateObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pushState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stateObject, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;popstate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 第一个页面加载时状态是null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    processState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>可以通过 <code>history.state</code> 获取当前的状态对象，也可以使用 <code>replaceState()</code>并传入与 <code>pushState()</code>同样的前两个参数来更新状态。更新状态不会创建新历史记录，只会覆盖当前状态：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ newFoo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newBar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,124)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
