import{_ as i,c as a,a0 as n,o as h}from"./chunks/framework.V6wbqQ68.js";const o=JSON.parse('{"title":"第 13 章 客户端检测","description":"","frontmatter":{},"headers":[],"relativePath":"website/language/JavaScript/High-Performance JavaScript/第13章 客户端检测.md","filePath":"website/language/JavaScript/High-Performance JavaScript/第13章 客户端检测.md"}'),t={name:"website/language/JavaScript/High-Performance JavaScript/第13章 客户端检测.md"};function e(l,s,p,k,r,d){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="第-13-章-客户端检测" tabindex="-1">第 13 章 客户端检测 <a class="header-anchor" href="#第-13-章-客户端检测" aria-label="Permalink to &quot;第 13 章 客户端检测&quot;">​</a></h1><h2 id="_13-1-能力检测" tabindex="-1">13.1 能力检测 <a class="header-anchor" href="#_13-1-能力检测" aria-label="Permalink to &quot;13.1 能力检测&quot;">​</a></h2><p>能力检测（又称特性检测）即在 JavaScript 运行时中使用一套简单的检测逻辑，测试浏览器是否支持某种特性。这种方式不要求事先知道特定浏览器的信息，只需检测自己关心的能力是否存在即可。能力检测的基本模式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (object.propertyInQuestion) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用object.propertyInQuestion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>能力检测的关键是理解两个重要概念。首先，如前所述，应该先检测最常用的方式。其次是必须检测切实需要的特性。某个能力存在并不代表别的能力也存在。</p><h3 id="_13-1-1-安全能力检测" tabindex="-1">13.1.1 安全能力检测 <a class="header-anchor" href="#_13-1-1-安全能力检测" aria-label="Permalink to &quot;13.1.1 安全能力检测&quot;">​</a></h3><h3 id="_13-1-2-基于能力检测进行浏览器分析" tabindex="-1">13.1.2 基于能力检测进行浏览器分析 <a class="header-anchor" href="#_13-1-2-基于能力检测进行浏览器分析" aria-label="Permalink to &quot;13.1.2 基于能力检测进行浏览器分析&quot;">​</a></h3><h4 id="_1-检测特性" tabindex="-1">1．检测特性 <a class="header-anchor" href="#_1-检测特性" aria-label="Permalink to &quot;1．检测特性&quot;">​</a></h4><p>可以按照能力将浏览器归类。如果你的应用程序需要使用特定的浏览器能力，那么最好集中检测所有能力，而不是等到用的时候再重复检测。（可以使用惰性函数）</p><h4 id="_2-检测浏览器" tabindex="-1">2．检测浏览器 <a class="header-anchor" href="#_2-检测浏览器" aria-label="Permalink to &quot;2．检测浏览器&quot;">​</a></h4><h4 id="_3-能力检测的局限" tabindex="-1">3．能力检测的局限 <a class="header-anchor" href="#_3-能力检测的局限" aria-label="Permalink to &quot;3．能力检测的局限&quot;">​</a></h4><p>可以根据对浏览器特性的检测并与已知特性对比，确认用户使用的是什么浏览器。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserDetector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试条件编译</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // IE6~10 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte6Lte10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*@cc_on! @*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试documentMode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // IE7~11 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte7Lte11 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentMode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试StyleMedia构造函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Edge 20 及以上版本支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isEdge_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.StyleMedia</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试Firefox专有扩展安装API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 所有版本的Firefox都支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isFirefox_Gte1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InstallTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试chrome对象及其webstore属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Opera的某些版本有window.chrome，但没有window.chrome.webstore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 所有版本的Chrome都支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isChrome_Gte1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.chrome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.chrome.webstore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari早期版本会给构造函数的标签符追加&quot;Constructor&quot;字样，如：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // window.Element.toString(); // [object ElementConstructor]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari 3~9.1 支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte3Lte9_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">constructor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.Element)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 推送通知API暴露在window对象上</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用默认参数值以避免对undefined调用toString()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Safari 7.1 及以上版本支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte7_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pushNotification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pushNotification.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[object SafariRemoteNotification]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(window.safari)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 测试addons属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Opera 20 及以上版本支持</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isOpera_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.opr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.opr.addons</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isIE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte6Lte10 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isIE_Gte7Lte11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isEdge_Gte20 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isFirefox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isFirefox_Gte1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isChrome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isChrome_Gte1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isSafari</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte3Lte9_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isSafari_Gte7_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isOpera</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isOpera_Gte20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-能力检测的局限-1" tabindex="-1">3．能力检测的局限 <a class="header-anchor" href="#_3-能力检测的局限-1" aria-label="Permalink to &quot;3．能力检测的局限&quot;">​</a></h4><h2 id="_13-2-用户代理检测" tabindex="-1">13.2 用户代理检测 <a class="header-anchor" href="#_13-2-用户代理检测" aria-label="Permalink to &quot;13.2 用户代理检测&quot;">​</a></h2><p>用户代理检测通过浏览器的用户代理字符串确定使用的是什么浏览器。用户代理字符串包含在每个 HTTP 请求的头部，在 JavaScript 中可以通过 <code>navigator.userAgent</code> 访问。在服务器端，常见的做法是根据接收到的用户代理字符串确定浏览器并执行相应操作。而在客户端，用户代理检测被认为是不可靠的，只应该在没有其他选项时再考虑。</p><h3 id="_13-2-1-用户代理的历史" tabindex="-1">13.2.1 用户代理的历史 <a class="header-anchor" href="#_13-2-1-用户代理的历史" aria-label="Permalink to &quot;13.2.1 用户代理的历史&quot;">​</a></h3><h3 id="_13-2-2-浏览器分析" tabindex="-1">13.2.2 浏览器分析 <a class="header-anchor" href="#_13-2-2-浏览器分析" aria-label="Permalink to &quot;13.2.2 浏览器分析&quot;">​</a></h3><h4 id="_1-伪造用户代理" tabindex="-1">1．伪造用户代理 <a class="header-anchor" href="#_1-伪造用户代理" aria-label="Permalink to &quot;1．伪造用户代理&quot;">​</a></h4><p>通过检测用户代理来识别浏览器并不是完美的方式，毕竟这个字符串是可以造假的。只不过实现 <code>window.navigator</code> 对象的浏览器（即所有现代浏览器）都会提供 <code>userAgent</code> 这个只读属性。因此，简单地给这个属性设置其他值不会有效。不过，通过简单的办法可以绕过这个限制。比如，有些浏览器提供伪私有的<code>__defineGetter__</code>方法，利用它可以篡改用户代理字符串：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.navigator.userAgent)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__defineGetter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userAgent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foobar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.navigator.userAgent) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;foobar&#39;</span></span></code></pre></div><h4 id="_2-分析浏览器" tabindex="-1">2．分析浏览器 <a class="header-anchor" href="#_2-分析浏览器" aria-label="Permalink to &quot;2．分析浏览器&quot;">​</a></h4><p>通过解析浏览器返回的用户代理字符串，可以极其准确地推断出下列相关的环境信息：</p><p>❑ 浏览器 <br> ❑ 浏览器版本 <br> ❑ 浏览器渲染引擎 <br> ❑ 设备类型（桌面/移动）<br> ❑ 设备生产商 <br> ❑ 设备型号 <br> ❑ 操作系统 <br> ❑ 操作系统版本</p><p>当然，新浏览器、新操作系统和新硬件设备随时可能出现，其中很多可能有着类似但并不相同的用户代理字符串。因此，用户代理解析程序需要与时俱进，频繁更新，以免落伍。自己手写的解析程序如果不及时更新或修订，很容易就过时了。本书上一版写过一个用户代理解析程序，但这一版并不推荐读者自己从头再写一个。相反，这里推荐一些 GitHub 上维护比较频繁的第三方用户代理解析程序：</p><p>❑ Bowser<br> ❑ UAParser.js<br> ❑ Platform.js<br> ❑ CURRENT-DEVICE<br> ❑ Google Closure<br> ❑ Mootools</p><h2 id="_13-3-软件与硬件检测" tabindex="-1">13.3 软件与硬件检测 <a class="header-anchor" href="#_13-3-软件与硬件检测" aria-label="Permalink to &quot;13.3 软件与硬件检测&quot;">​</a></h2><h3 id="_13-3-1-识别浏览器与操作系统" tabindex="-1">13.3.1 识别浏览器与操作系统 <a class="header-anchor" href="#_13-3-1-识别浏览器与操作系统" aria-label="Permalink to &quot;13.3.1 识别浏览器与操作系统&quot;">​</a></h3><h4 id="_1-navigator-oscpu-已弃用" tabindex="-1">1．navigator.oscpu(已弃用) <a class="header-anchor" href="#_1-navigator-oscpu-已弃用" aria-label="Permalink to &quot;1．navigator.oscpu(已弃用)&quot;">​</a></h4><h4 id="_2-navigator-vendor-已弃用" tabindex="-1">2．navigator.vendor(已弃用) <a class="header-anchor" href="#_2-navigator-vendor-已弃用" aria-label="Permalink to &quot;2．navigator.vendor(已弃用)&quot;">​</a></h4><h4 id="_3-navigator-platform-已弃用" tabindex="-1">3．navigator.platform(已弃用) <a class="header-anchor" href="#_3-navigator-platform-已弃用" aria-label="Permalink to &quot;3．navigator.platform(已弃用)&quot;">​</a></h4><h4 id="_4-screen-colordepth-和-screen-pixeldepth" tabindex="-1">4．screen.colorDepth 和 screen.pixelDepth <a class="header-anchor" href="#_4-screen-colordepth-和-screen-pixeldepth" aria-label="Permalink to &quot;4．screen.colorDepth 和 screen.pixelDepth&quot;">​</a></h4><p><code>screen.colorDepth</code> 和 <code>screen.pixelDepth</code> 返回一样的值，即显示器每像素颜色的位深。</p><p>根据 CSSOM( CSS 对象模型 ) 视图，为兼容起见，该值总为 24。</p><h4 id="_5-screen-orientation" tabindex="-1">5．screen.orientation <a class="header-anchor" href="#_5-screen-orientation" aria-label="Permalink to &quot;5．screen.orientation&quot;">​</a></h4><p><code>screen.orientation</code> 属性返回一个 <code>ScreenOrientation</code> 对象，其中包含 Screen Orientation API 定义的屏幕信息。这里面最有意思的属性是 <code>angle</code> 和 <code>type</code>，前者返回相对于默认状态下屏幕的角度，后者返回以下 4 种枚举值之一：</p><p>❑ portrait-primary<br> ❑ portrait-secondary<br> ❑ landscape-primary<br> ❑ landscape-secondary</p><h3 id="_13-3-2-浏览器元数据" tabindex="-1">13.3.2 浏览器元数据 <a class="header-anchor" href="#_13-3-2-浏览器元数据" aria-label="Permalink to &quot;13.3.2 浏览器元数据&quot;">​</a></h3><h4 id="_1-geolocation-api" tabindex="-1">1．Geolocation API <a class="header-anchor" href="#_1-geolocation-api" aria-label="Permalink to &quot;1．Geolocation API&quot;">​</a></h4><p><code>navigator.geolocation</code> 属性暴露了 Geolocation API，可以让浏览器脚本感知当前设备的地理位置。这个 API 只在安全执行环境（通过 HTTPS 获取的脚本）中可用。</p><p>这个 API 可以查询宿主系统并尽可能精确地返回设备的位置信息。根据宿主系统的硬件和配置，返回结果的精度可能不一样。手机 GPS 的坐标系统可能具有极高的精度，而 IP 地址的精度就要差很多。根据 Geolocation API 规范：</p><p>地理位置信息的主要来源是 GPS 和 IP 地址、射频识别（RFID）​、Wi-Fi 及蓝牙 Mac 地址、GSM/CDMA 蜂窝 ID 以及用户输入等信息。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>浏览器也可能会利用 Google Location Service（Chrome 和 Firefox）等服务确定位置。有时候，你可能会发现自己并没有 GPS，但浏览器给出的坐标却非常精确。浏览器会收集所有可用的无线网络，包括 Wi-Fi 和蜂窝信号。拿到这些信息后，再去查询网络数据库。这样就可以精确地报告出你的设备位置。</p></div><p>要获取浏览器当前的位置，可以使用 <code>getCurrentPosition()</code>方法。这个方法返回一个 <code>Coordinates</code> 对象，其中包含的信息不一定完全依赖宿主系统的能力：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enableHighAccuracy: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maximumAge: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pos.coords </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回一个定义了当前位置的Coordinates 对象。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timestamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pos.timestamp </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回一个时间戳DOMTimeStamp，这个时间戳表示获取到的位置的时间。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Your current position is:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Latitude : &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.latitude)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Longitude: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.longitude)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;altitude: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.altitude) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 海拔高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;heading: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.heading) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相对于正北方向移动的角度（0 ≤ heading &lt; 360）​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;speed: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.speed) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设备每秒移动的速度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;altitudeAccuracy: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.altitudeAccuracy)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;More or less &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crd.accuracy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; meters.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ERROR(&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;): &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.geolocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(success, error, options)</span></span></code></pre></div><p>获取浏览器地理位置并不能保证成功。因此 ·方法也接收失败回调函数作为第二个参数，这个函数会收到一个 <code>PositionError</code> 对象。在失败的情况下，<code>PositionError</code> 对象中会包含一个 <code>code</code> 属性和一个 <code>message</code> 属性，后者包含对错误的简短描述。<code>code</code> 属性是一个整数，表示以下 3 种错误。</p><p>❑ PERMISSION_DENIED：浏览器未被允许访问设备位置。页面第一次尝试访问 Geolocation API 时，浏览器会弹出确认对话框取得用户授权（每个域分别获取）​。如果返回了这个错误码，则要么是用户不同意授权，要么是在不安全的环境下访问了 Geolocation API。message 属性还会提供额外信息。<br> ❑ POSITION_UNAVAILABLE：系统无法返回任何位置信息。这个错误码可能代表各种失败原因，但相对来说并不常见，因为只要设备能上网，就至少可以根据 IP 地址返回一个低精度的坐标。<br> ❑ TIMEOUT：系统不能在超时时间内返回位置信息。</p><p>Geolocation API 位置请求可以使用 <code>PositionOptions</code> 对象来配置，作为第三个参数提供。这个对象支持以下 3 个属性。</p><p>❑ enableHighAccuracy：布尔值，true 表示返回的值应该尽量精确，默认值为 false。默认情况下，设备通常会选择最快、最省电的方式返回坐标。这通常意味着返回的是不够精确的坐标。比如，在移动设备上，默认位置查询通常只会采用 Wi-Fi 和蜂窝网络的定位信息。而在 enableHighAccuracy 为 true 的情况下，则会使用设备的 GPS 确定设备位置，并返回这些值的混合结果。使用 GPS 会更耗时、耗电，因此在使用 enableHighAccuracy 配置时要仔细权衡一下。<br> ❑ timeout：毫秒，表示在以 TIMEOUT 状态调用错误回调函数之前等待的最长时间。默认值是 0xFFFFFFFF（232-1）​。0 表示完全跳过系统调用而立即以 TIMEOUT 调用错误回调函数。<br> ❑ maximumAge：毫秒，表示返回坐标的最长有效期，默认值为 0。因为查询设备位置会消耗资源，所以系统通常会缓存坐标并在下次返回缓存的值（遵从位置缓存失效策略）​。系统会计算缓存期，如果 Geolocation API 请求的配置要求比缓存的结果更新，则系统会重新查询并返回值。0 表示强制系统忽略缓存的值，每次都重新查询。而 Infinity 会阻止系统重新查询，只会返回缓存的值。JavaScript 可以通过检查 Position 对象的 timestamp 属性值是否重复来判断返回的是不是缓存值。</p><h4 id="_2-connection-state-和-networkinformation-api" tabindex="-1">2．Connection State 和 NetworkInformation API <a class="header-anchor" href="#_2-connection-state-和-networkinformation-api" aria-label="Permalink to &quot;2．Connection State 和 NetworkInformation API&quot;">​</a></h4><p>浏览器会跟踪网络连接状态并以两种方式暴露这些信息：连接事件和 <code>navigator.onLine</code> 属性。在设备连接到网络时，浏览器会记录这个事实并在 <code>window</code> 对象上触发 <code>online</code> 事件。相应地，当设备断开网络连接后，浏览器会在 <code>window</code> 对象上触发 <code>offline</code> 事件。任何时候，都可以通过 <code>navigator.onLine</code> 属性来确定浏览器的联网状态。这个属性返回一个布尔值，表示浏览器是否联网。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connectionStateChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator.onLine)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connectionStateChange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connectionStateChange)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设备联网时：true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设备断网时：false</span></span></code></pre></div><p><code>navigator</code> 对象还暴露了 NetworkInformation API，可以通过 <code>navigator.connection</code> 属性使用。这个 API 提供了一些只读属性，并为连接属性变化事件处理程序定义了一个事件对象。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>❑ downlink：整数，表示当前设备的带宽（以 Mbit/s 为单位），舍入到最接近的 25kbit/s。这个值可能会根据历史网络吞吐量计算，也可能根据连接技术的能力来计算。</span></span>
<span class="line"><span>❑ downlinkMax：整数，表示当前设备最大的下行带宽（以 Mbit/s 为单位），根据网络的第一跳来确定。因为第一跳不一定反映端到端的网络速度，所以这个值只能用作粗略的上限值。</span></span>
<span class="line"><span>❑ effectiveType：字符串枚举值，表示连接速度和质量。这些值对应不同的蜂窝数据网络连接技术，但也用于分类无线网络。这个值有以下 4 种可能。</span></span>
<span class="line"><span>  ■ slow-2g</span></span>
<span class="line"><span>    ➢ 往返时间＞ 2000ms</span></span>
<span class="line"><span>    ➢ 下行带宽＜ 50kbit/s</span></span>
<span class="line"><span>  ■ 2g</span></span>
<span class="line"><span>    ➢ 2000ms ＞往返时间 ≥1400ms</span></span>
<span class="line"><span>    ➢ 70kbit/s ＞下行带宽 ≥50kbit/s</span></span>
<span class="line"><span>  ■ 3g</span></span>
<span class="line"><span>    ➢ 1400ms ＞往返时间 ≥270ms</span></span>
<span class="line"><span>    ➢ 700kbit/s ＞下行带宽 ≥70kbit/s</span></span>
<span class="line"><span>  ■ 4g</span></span>
<span class="line"><span>    ➢ 270ms ＞往返时间 ≥0ms</span></span>
<span class="line"><span>    ➢ 下行带宽 ≥700kbit/s</span></span>
<span class="line"><span>❑ rtt：毫秒，表示当前网络实际的往返时间，舍入为最接近的 25 毫秒。这个值可能根据历史网络吞吐量计算，也可能根据连接技术的能力来计算。</span></span>
<span class="line"><span>❑ type：字符串枚举值，表示网络连接技术。这个值可能为下列值之一。</span></span>
<span class="line"><span>  ■ bluetooth：蓝牙。</span></span>
<span class="line"><span>  ■ cellular：蜂窝。</span></span>
<span class="line"><span>  ■ ethernet：以太网。</span></span>
<span class="line"><span>  ■ none：无网络连接。相当于 navigator.onLine === false。</span></span>
<span class="line"><span>  ■ mixed：多种网络混合。</span></span>
<span class="line"><span>  ■ other：其他。</span></span>
<span class="line"><span>  ■ unknown：不确定。</span></span>
<span class="line"><span>  ■ wifi:Wi-Fi。</span></span>
<span class="line"><span>  ■ wimax:WiMAX。</span></span>
<span class="line"><span>❑ saveData：布尔值，表示用户设备是否启用了“节流”（reduced data）模式。</span></span>
<span class="line"><span>❑ onchange：事件处理程序，会在任何连接状态变化时激发一个 change 事件。可以通过 navigator. connection.addEventListener(&#39;change&#39;, changeHandler) 或 navigator.connection.onchange = changeHandler 等方式使用。</span></span></code></pre></div><h4 id="_3-battery-status-api" tabindex="-1">3．Battery Status API <a class="header-anchor" href="#_3-battery-status-api" aria-label="Permalink to &quot;3．Battery Status API&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// BatteryManager { ... }</span></span></code></pre></div><p><code>BatteryManager</code> 包含 4 个只读属性，提供了设备电池的相关信息。</p><p>❑ charging：布尔值，表示设备当前是否正接入电源充电。如果设备没有电池，则返回 true。<br> ❑ chargingTime：整数，表示预计离电池充满还有多少秒。如果电池已充满或设备没有电池，则返回 0。<br> ❑ dischargingTime：整数，表示预计离电量耗尽还有多少秒。如果设备没有电池，则返回 Infinity。<br> ❑ level：浮点数，表示电量百分比。电量完全耗尽返回 0.0，电池充满返回 1.0。如果设备没有电池，则返回 1.0。</p><p>这个 API 还提供了 4 个事件属性，可用于设置在相应的电池事件发生时调用的回调函数。可以通过给 <code>BatteryManager</code> 添加事件监听器，也可以通过给事件属性赋值来使用这些属性。</p><p>❑ onchargingchange<br> ❑ onchargingtimechange<br> ❑ ondischargingtimechange<br> ❑ onlevelchange</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">battery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加充电状态变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chargingChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onchargingchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chargingChangeHandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chargingChangeHandler)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加充电时间变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chargingTimeChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onchargingtimechange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chargingTimeChangeHandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chargingTimeChangeHandler)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加放电时间变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dischargingTimeChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dischargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.ondischargingtimechange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dischargingTimeChangeHandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dischargingtimechange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dischargingTimeChangeHandler)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加电量百分比变化时的处理程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> levelChangeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;levelchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.onlevelchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> levelChangeHandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  battery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;levelchange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, levelChangeHandler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_13-3-3-硬件" tabindex="-1">13.3.3 硬件 <a class="header-anchor" href="#_13-3-3-硬件" aria-label="Permalink to &quot;13.3.3 硬件&quot;">​</a></h3><h4 id="_1-处理器核心数" tabindex="-1">1．处理器核心数 <a class="header-anchor" href="#_1-处理器核心数" aria-label="Permalink to &quot;1．处理器核心数&quot;">​</a></h4><p><code>navigator.hardwareConcurrency</code> 属性返回浏览器支持的逻辑处理器核心数量，包含表示核心数的一个整数值（如果核心数无法确定，这个值就是 1）​。关键在于，这个值表示浏览器可以并行执行的最大工作线程数量，不一定是实际的 CPU 核心数。</p><h4 id="_2-设备内存大小" tabindex="-1">2．设备内存大小 <a class="header-anchor" href="#_2-设备内存大小" aria-label="Permalink to &quot;2．设备内存大小&quot;">​</a></h4><p><code>navigator.deviceMemory</code> 属性返回设备大致的系统内存大小，包含单位为 GB 的浮点数（舍入为最接近的 2 的幂：512MB 返回 0.5,4GB 返回 4）​。</p><h4 id="_3-最大触点数" tabindex="-1">3．最大触点数 <a class="header-anchor" href="#_3-最大触点数" aria-label="Permalink to &quot;3．最大触点数&quot;">​</a></h4><p><code>navigator.maxTouchPoints</code> 属性返回触摸屏支持的最大关联触点数量，包含一个整数值。</p>`,68)]))}const g=i(t,[["render",e]]);export{o as __pageData,g as default};
