import{_ as i,c as t,a0 as a,o as e}from"./chunks/framework.V6wbqQ68.js";const c=JSON.parse('{"title":"第 17 章 事件","description":"","frontmatter":{},"headers":[],"relativePath":"website/language/JavaScript/High-Performance JavaScript/第17章 事件.md","filePath":"website/language/JavaScript/High-Performance JavaScript/第17章 事件.md"}'),n={name:"website/language/JavaScript/High-Performance JavaScript/第17章 事件.md"};function l(h,s,k,p,d,E){return e(),t("div",null,s[0]||(s[0]=[a(`<h1 id="第-17-章-事件" tabindex="-1">第 17 章 事件 <a class="header-anchor" href="#第-17-章-事件" aria-label="Permalink to &quot;第 17 章 事件&quot;">​</a></h1><h2 id="_17-1-事件流" tabindex="-1">17.1 事件流 <a class="header-anchor" href="#_17-1-事件流" aria-label="Permalink to &quot;17.1 事件流&quot;">​</a></h2><h3 id="_17-1-1-事件冒泡" tabindex="-1">17.1.1 事件冒泡 <a class="header-anchor" href="#_17-1-1-事件冒泡" aria-label="Permalink to &quot;17.1.1 事件冒泡&quot;">​</a></h3><p>IE 事件流被称为事件冒泡，这是因为事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上传播至没有那么具体的元素（文档）​。</p><p>事件沿 DOM 树一路向上，在经过的每个节点上依次触发，直至到达 <code>document</code> 对象。现代浏览器中的事件会一直冒泡到 <code>window</code> 对象。</p><h3 id="_17-1-2-事件捕获" tabindex="-1">17.1.2 事件捕获 <a class="header-anchor" href="#_17-1-2-事件捕获" aria-label="Permalink to &quot;17.1.2 事件捕获&quot;">​</a></h3><p>事件捕获的意思是最不具体的节点应该最先收到事件，而最具体的节点应该最后收到事件。所有浏览器都是从 <code>window</code> 对象开始捕获事件，而 DOM2 Events 规范规定的是从 <code>document</code> 开始。</p><h3 id="_17-1-3-dom-事件流" tabindex="-1">17.1.3 DOM 事件流 <a class="header-anchor" href="#_17-1-3-dom-事件流" aria-label="Permalink to &quot;17.1.3 DOM 事件流&quot;">​</a></h3><p>DOM2 Events 规范规定事件流分为 3 个阶段：事件捕获、到达目标和事件冒泡。事件捕获最先发生，为提前拦截事件提供了可能。然后，实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个阶段响应事件。</p><h2 id="_17-2-事件处理程序" tabindex="-1">17.2 事件处理程序 <a class="header-anchor" href="#_17-2-事件处理程序" aria-label="Permalink to &quot;17.2 事件处理程序&quot;">​</a></h2><p>为响应事件而调用的函数被称为事件处理程序（或事件监听器）​。事件处理程序的名字以&quot;on&quot;开头。</p><h3 id="_17-2-1-html-事件处理程序" tabindex="-1">17.2.1 HTML 事件处理程序 <a class="header-anchor" href="#_17-2-1-html-事件处理程序" aria-label="Permalink to &quot;17.2.1 HTML 事件处理程序&quot;">​</a></h3><p>特定元素支持的每个事件都可以使用事件处理程序的名字以 HTML 属性的形式来指定。此时属性的值必须是能够执行的 JavaScript 代码。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;Clicked&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>在 HTML 中定义的事件处理程序可以包含精确的动作指令，也可以调用在页面其他地方定义的脚本。以这种方式指定的事件处理程序有一些特殊的地方。首先，会创建一个函数来封装属性的值。这个函数有一个特殊的局部变量 <code>event</code>，其中保存的就是<a href="#event"><code>event</code> 对象</a>。在这个函数中，this 值相当于事件的目标元素。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 输出&quot;click&quot; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 输出&quot;Click Me&quot; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这个动态创建的包装函数还有一个特别有意思的地方，就是其作用域链被扩展了。在这个函数中，<code>document</code> 和元素自身的成员都可以被当成局部变量来访问。这是通过使用 <code>with</code> 实现的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (document) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这意味着事件处理程序可以更方便地访问自己的属性。下面的代码与前面的示例功能一样：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 输出&quot;Click Me&quot; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>如果这个元素是一个表单输入框，则作用域链中还会包含表单元素，事件处理程序对应的函数等价于如下这样：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (document) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.form) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 HTML 中指定事件处理程序有一些问题。第一个问题是时机问题。有可能 HTML 元素已经显示在页面上，用户都与其交互了，而事件处理程序的代码还无法执行。为此，大多数 HTML 事件处理程序会封装在 <code>try/catch</code> 块中，以便在这种情况下静默失败。另一个问题是对事件处理程序作用域链的扩展在不同浏览器中可能导致不同的结果。不同 JavaScript 引擎中标识符解析的规则存在差异，因此访问无限定的对象成员可能导致错误。使用 HTML 指定事件处理程序的最后一个问题是 HTML 与 JavaScript 强耦合。</p><h3 id="_17-2-2-dom0-事件处理程序" tabindex="-1">17.2.2 DOM0 事件处理程序 <a class="header-anchor" href="#_17-2-2-dom0-事件处理程序" aria-label="Permalink to &quot;17.2.2 DOM0 事件处理程序&quot;">​</a></h3><p>事件处理程序会在元素的作用域中运行，即 <code>this</code> 等于元素。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myBtn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.onclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 移除事件处理程序</span></span></code></pre></div><p>以这种方式添加事件处理程序是注册在事件流的冒泡阶段的。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>如果事件处理程序是在 HTML 中指定的，则 <code>onclick</code> 属性的值是一个包装相应 HTML 事件处理程序属性值的函数。这些事件处理程序也可以通过在 JavaScript 中将相应属性设置为 null 来移除。</p></div><h3 id="_17-2-3-dom2-事件处理程序" tabindex="-1">17.2.3 DOM2 事件处理程序 <a class="header-anchor" href="#_17-2-3-dom2-事件处理程序" aria-label="Permalink to &quot;17.2.3 DOM2 事件处理程序&quot;">​</a></h3><p>DOM2 Events 为事件处理程序的赋值和移除定义了两个方法：<code>addEventListener()</code>和 <code>removeEventListener()</code>。这两个方法暴露在所有 DOM 节点上，它们接收 3 个参数：事件名、事件处理函数和一个布尔值，<code>true</code> 表示在捕获阶段调用事件处理程序，<code>false</code>（默认值）表示在冒泡阶段调用事件处理程序。</p><p>与 DOM0 方式类似，这个事件处理程序同样在被附加到的元素的作用域中运行。使用 DOM2 方式的主要优势是可以为同一个事件添加多个事件处理程序。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Helloworld!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>通过 <code>addEventListener()</code>添加的事件处理程序只能使用 <code>removeEventListener()</code>并传入与添加时同样的参数来移除。这意味着使用 <code>addEventListener()</code>添加的匿名函数无法移除。</p><h3 id="_17-2-4-ie-事件处理程序" tabindex="-1">17.2.4 IE 事件处理程序 <a class="header-anchor" href="#_17-2-4-ie-事件处理程序" aria-label="Permalink to &quot;17.2.4 IE 事件处理程序&quot;">​</a></h3><p>IE 实现了与 DOM 类似的方法，即 <code>attachEvent()</code>和 <code>detachEvent()</code>。这两个方法接收两个同样的参数：事件处理程序的名字和事件处理函数。因为 IE8 及更早版本只支持事件冒泡，所以使用 <code>attachEvent()</code>添加的事件处理程序会添加到冒泡阶段。</p><p>使用 <code>attachEvent()</code>时，事件处理程序是在全局作用域中运行的，因此 <code>this</code> 等于 <code>window</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onclick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>注意，<code>attachEvent()</code>的第一个参数是&quot;<code>onclick</code>&quot;，而不是 DOM 的 <code>addEventListener()</code>方法的&quot;<code>click</code>&quot;。</p><p><code>attachEvent()</code>方法也可以给一个元素添加多个事件处理程序。与 DOM 方法不同，这里的事件处理程序会以添加它们的顺序反向触发。</p><h3 id="_17-2-5-跨浏览器事件处理程序" tabindex="-1">17.2.5 跨浏览器事件处理程序 <a class="header-anchor" href="#_17-2-5-跨浏览器事件处理程序" aria-label="Permalink to &quot;17.2.5 跨浏览器事件处理程序&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventUtil </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.addEventListener) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, handler, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.attachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.removeEventListener) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, handler, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element.detachEvent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type, handler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      element[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;on&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="event" tabindex="-1">17.3 事件对象 <a class="header-anchor" href="#event" aria-label="Permalink to &quot;17.3 事件对象{#event}&quot;">​</a></h2><p>在 DOM 中发生事件时，所有相关信息都会被收集并存储在一个名为 <code>event</code> 的对象中。这个对象包含了一些基本信息，比如导致事件的元素、发生的事件类型，以及可能与特定事件相关的任何其他数据。</p><h3 id="_17-3-1-dom-事件对象" tabindex="-1">17.3.1 DOM 事件对象 <a class="header-anchor" href="#_17-3-1-dom-事件对象" aria-label="Permalink to &quot;17.3.1 DOM 事件对象&quot;">​</a></h3><p>在 DOM 合规的浏览器中，<code>event</code> 对象是传给事件处理程序的唯一参数。不管以哪种方式（DOM0 或 DOM2）指定事件处理程序，都会传入这个 <code>event</code> 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;click&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;click&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如前所述，事件对象包含与特定事件相关的属性和方法。不同的事件生成的事件对象也会包含不同的属性和方法。不过，所有事件对象都会包含下表列出的这些公共属性和方法。</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性/方法</th><th style="text-align:center;">类型</th><th style="text-align:center;">读/写</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">bubbles</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">只读</td><td style="text-align:center;">表示事件是否冒泡</td></tr><tr><td style="text-align:center;">cancelable</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">只读</td><td style="text-align:center;">表示是否可以取消事件的默认行为</td></tr><tr><td style="text-align:center;">currentTarget</td><td style="text-align:center;">元素</td><td style="text-align:center;">只读</td><td style="text-align:center;">当前事件处理程序所在的元素</td></tr><tr><td style="text-align:center;">defaultPrevented</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">只读</td><td style="text-align:center;">true 表示已经调用 preventDefault() 方法（DOM3 Events 中新增）</td></tr><tr><td style="text-align:center;">detail</td><td style="text-align:center;">整数</td><td style="text-align:center;">只读</td><td style="text-align:center;">事件相关的其他信息</td></tr><tr><td style="text-align:center;">eventPhase</td><td style="text-align:center;">整数</td><td style="text-align:center;">只读</td><td style="text-align:center;">表示调用处理程序的阶段：1 代表捕获阶段，2 代表到达目标，3 代表冒泡阶段</td></tr><tr><td style="text-align:center;">preventDefault()</td><td style="text-align:center;">函数</td><td style="text-align:center;">只读</td><td style="text-align:center;">用于取消事件的默认行为。只有 cancelable 为 true 才可以调用这个方法</td></tr><tr><td style="text-align:center;">stopImmediatePropagation()</td><td style="text-align:center;">函数</td><td style="text-align:center;">只读</td><td style="text-align:center;">用于取消所有后续事件捕获或事件冒泡，并阻止调用任何后续事件处理程序（DOM3 Events 中新增）</td></tr><tr><td style="text-align:center;">stopPropagation()</td><td style="text-align:center;">函数</td><td style="text-align:center;">只读</td><td style="text-align:center;">用于取消所有后续事件捕获或事件冒泡。只有 bubbles 为 true 时才可以调用这个方法</td></tr><tr><td style="text-align:center;">target</td><td style="text-align:center;">元素</td><td style="text-align:center;">只读</td><td style="text-align:center;">事件目标</td></tr><tr><td style="text-align:center;">trusted</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">只读</td><td style="text-align:center;">true 表示事件由浏览器生成的。false 表示事件是开发者通过 JavaScript 创建的（DOM3 Events 中新增）</td></tr><tr><td style="text-align:center;">type</td><td style="text-align:center;">字符串</td><td style="text-align:center;">只读</td><td style="text-align:center;">被触发的事件类型</td></tr><tr><td style="text-align:center;">view</td><td style="text-align:center;">AbstractView</td><td style="text-align:center;">只读</td><td style="text-align:center;">与事件相关的抽象视图。等于事件所发生的 window 对象</td></tr></tbody></table><p>在事件处理程序内部，<code>this</code> 对象始终等于 <code>currentTarget</code> 的值，而 <code>target</code> 只包含事件的实际目标。如果事件处理程序直接添加在了意图的目标，则 <code>this</code>、<code>currentTarget</code> 和 <code>target</code> 的值是一样的。</p><p><code>preventDefault()</code>方法用于阻止特定事件的默认动作。</p><p><code>stopPropagation()</code>方法用于立即阻止事件流在 DOM 结构中传播，取消后续的事件捕获或冒泡。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p><code>event</code> 对象只在事件处理程序执行期间存在，一旦执行完毕，就会被销毁。</p></div><h3 id="_17-3-2-ie-事件对象" tabindex="-1">17.3.2 IE 事件对象 <a class="header-anchor" href="#_17-3-2-ie-事件对象" aria-label="Permalink to &quot;17.3.2 IE 事件对象&quot;">​</a></h3><p>与 DOM 事件对象不同，IE 事件对象可以基于事件处理程序被指定的方式以不同方式来访问。如果事件处理程序是使用 DOM0 方式指定的，则 <code>event</code> 对象只是 <code>window</code> 对象的一个属性。不过，如果事件处理程序是使用 <code>attachEvent()</code>指定的，则 <code>event</code> 对象会作为唯一的参数传给处理函数。使用 <code>attachEvent()</code>时，<code>event</code> 对象仍然是 <code>window</code> 对象的属性（像 DOM0 方式那样）​，只是出于方便也将其作为参数传入。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  letevent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;click&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onclick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;click&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>所有 IE 事件对象都会包含下表所列的公共属性和方法。</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性/方法</th><th style="text-align:center;">类型</th><th style="text-align:center;">读/写</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">cancelBubble</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">读/写</td><td style="text-align:center;">默认为 false，设置为 true 可以取消冒泡（与 DOM 的 stopPropagation() 方法相同）</td></tr><tr><td style="text-align:center;">returnValue</td><td style="text-align:center;">布尔值</td><td style="text-align:center;">读/写</td><td style="text-align:center;">默认为 true，设置为 false 可以取消事件默认行为（与 DOM 的 preventDefault() 方法相同）</td></tr><tr><td style="text-align:center;">srcElement</td><td style="text-align:center;">元素</td><td style="text-align:center;">只读</td><td style="text-align:center;">事件目标（与 DOM 的 target 属性相同）</td></tr><tr><td style="text-align:center;">type</td><td style="text-align:center;">字符串</td><td style="text-align:center;">只读</td><td style="text-align:center;">触发的事件类型</td></tr></tbody></table><h3 id="_17-3-3-跨浏览器事件对象" tabindex="-1">17.3.3 跨浏览器事件对象 <a class="header-anchor" href="#_17-3-3-跨浏览器事件对象" aria-label="Permalink to &quot;17.3.3 跨浏览器事件对象&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventUtil </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 为节省版面，删除了之前的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    returnevent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    returnevent.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.srcElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.preventDefault) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 为节省版面，删除了之前的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.stopPropagation) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.cancelBubble </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_17-4-事件类型" tabindex="-1">17.4 事件类型 <a class="header-anchor" href="#_17-4-事件类型" aria-label="Permalink to &quot;17.4 事件类型&quot;">​</a></h2><p>DOM3 Events 定义了如下事件类型。</p><p>❑ 用户界面事件（UIEvent）​：涉及与 BOM 交互的通用浏览器事件。<br> ❑ 焦点事件（FocusEvent）​：在元素获得和失去焦点时触发。<br> ❑ 鼠标事件（MouseEvent）​：使用鼠标在页面上执行某些操作时触发。<br> ❑ 滚轮事件（WheelEvent）​：使用鼠标滚轮（或类似设备）时触发。<br> ❑ 输入事件（InputEvent）​：向文档中输入文本时触发。<br> ❑ 键盘事件（KeyboardEvent）​：使用键盘在页面上执行某些操作时触发。<br> ❑ 合成事件（CompositionEvent）​：在使用某种 IME（Input Method Editor，输入法编辑器）输入字符时触发。</p><h3 id="_17-4-1-用户界面事件" tabindex="-1">17.4.1 用户界面事件 <a class="header-anchor" href="#_17-4-1-用户界面事件" aria-label="Permalink to &quot;17.4.1 用户界面事件&quot;">​</a></h3><p>❑ DOMActivate：元素被用户通过鼠标或键盘操作激活时触发（比 <code>click</code> 或 <code>keydown</code> 更通用）​。这个事件在 DOM3 Events 中已经废弃。因为浏览器实现之间存在差异，所以不要使用它。<br> ❑ load：在 <code>window</code> 上当页面加载完成后触发，在窗套（<code>&lt;frameset&gt;</code>）上当所有窗格（<code>&lt;frame&gt;</code>）都加载完成后触发，在<code>&lt;img&gt;</code>元素上当图片加载完成后触发，在<code>&lt;object&gt;</code>元素上当相应对象加载完成后触发。<br> ❑ unload：在 <code>window</code> 上当页面完全卸载后触发，在窗套上当所有窗格都卸载完成后触发，在<code>&lt;object&gt;</code>元素上当相应对象卸载完成后触发。<br> ❑ abort：在<code>&lt;object&gt;</code>元素上当相应对象加载完成前被用户提前终止下载时触发。<br> ❑ error：在 <code>window</code> 上当 JavaScript 报错时触发，在<code>&lt;img&gt;</code>元素上当无法加载指定图片时触发，在<code>&lt;object&gt;</code>元素上当无法加载相应对象时触发，在窗套上当一个或多个窗格无法完成加载时触发。<br> ❑ select：在文本框（<code>&lt;input&gt;</code>或 <code>textarea</code>）上当用户选择了一个或多个字符时触发。<br> ❑ resize：在 <code>window</code> 或窗格上当窗口或窗格被缩放时触发。<br> ❑ scroll：当用户滚动包含滚动条的元素时在元素上触发。<code>&lt;body&gt;</code>元素包含已加载页面的滚动条。</p><p>除了 <code>DOMActivate</code>，这些事件在 DOM2 Events 中都被归为 HTML Events（<code>DOMActivate</code> 在 DOM2 中仍旧是 UI 事件）​。</p><h4 id="_1-load-事件" tabindex="-1">1．load 事件 <a class="header-anchor" href="#_1-load-事件" aria-label="Permalink to &quot;1．load 事件&quot;">​</a></h4><p><code>load</code> 事件可能是 JavaScript 中最常用的事件。在 <code>window</code> 对象上，<code>load</code> 事件会在整个页面（包括所有外部资源如图片、JavaScript 文件和 CSS 文件）加载完成后触发。可以通过两种方式指定 <code>load</code> 事件处理程序。第一种是 JavaScript 方式，使用 <code>addEventListener()</code>方法来指定事件处理程序。第二种指定 <code>load</code> 事件处理程序的方式是向<code>&lt;body&gt;</code>元素添加 <code>onload</code> 属性。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;Loaded! &#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Loaded! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>根据 DOM2 Events, <code>load</code> 事件应该在 <code>document</code> 而非 <code>window</code> 上触发。可是为了向后兼容，所有浏览器都在 <code>window</code> 上实现了 <code>load</code> 事件。</p></div><p>图片上也会触发 <code>load</code> 事件，包括 DOM 中的图片和非 DOM 中的图片。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;smile.gif&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;Image loaded.&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myImage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  image.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.target.src)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>&lt;script&gt;</code>元素会在 JavaScript 文件加载完成后触发 <code>load</code> 事件，从而可以动态检测。与图片不同，要下载 JavaScript 文件必须同时指定 <code>src</code> 属性并把<code>&lt;script&gt;</code>元素添加到文档中。因此指定事件处理程序和指定 <code>src</code> 属性的顺序在这里并不重要。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  letscript </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Loaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>IE 和 Opera 支持<code>&lt;link&gt;</code>元素触发 <code>load</code> 事件，因而支持动态检测样式表是否加载完成。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  letlink </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;text/css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;stylesheet&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cssloaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;example.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;head&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>与<code>&lt;script&gt;</code>节点一样，在指定 <code>href</code> 属性并把<code>&lt;link&gt;</code>节点添加到文档之前不会下载样式表。</p><h4 id="_2-unload-事件" tabindex="-1">2．unload 事件 <a class="header-anchor" href="#_2-unload-事件" aria-label="Permalink to &quot;2．unload 事件&quot;">​</a></h4><p>与 <code>load</code> 事件相对的是 <code>unload</code> 事件，<code>unload</code> 事件会在文档卸载完成后触发。<code>unload</code> 事件一般是在从一个页面导航到另一个页面时触发，最常用于清理引用，以避免内存泄漏。与 <code>load</code> 事件类似，<code>unload</code> 事件处理程序也有两种指定方式。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onunload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;Unloaded! &#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unloaded! &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>根据 DOM2 Events, <code>unload</code> 事件应该在<code>&lt;body&gt;</code>而非 <code>window</code> 上触发。可是为了向后兼容，所有浏览器都在 <code>window</code> 上实现了 <code>unload</code> 事件。</p></div><h4 id="_3-resize-事件" tabindex="-1">3．resize 事件 <a class="header-anchor" href="#_3-resize-事件" aria-label="Permalink to &quot;3．resize 事件&quot;">​</a></h4><p>当浏览器窗口被缩放到新高度或宽度时，会触发 <code>resize</code> 事件。这个事件在 <code>window</code> 上触发，因此可以通过 JavaScript 在 <code>window</code> 上或者为<code>&lt;body&gt;</code>元素添加 <code>onresize</code> 属性来指定事件处理程序。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Resized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>浏览器窗口在最大化和最小化时也会触发 <code>resize</code> 事件。</p></div><h4 id="_4-scroll-事件" tabindex="-1">4．scroll 事件 <a class="header-anchor" href="#_4-scroll-事件" aria-label="Permalink to &quot;4．scroll 事件&quot;">​</a></h4><h3 id="_17-4-2-焦点事件" tabindex="-1">17.4.2 焦点事件 <a class="header-anchor" href="#_17-4-2-焦点事件" aria-label="Permalink to &quot;17.4.2 焦点事件&quot;">​</a></h3><p>❑ blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。<br> ❑ DOMFocusIn：当元素获得焦点时触发。这个事件是 focus 的冒泡版。Opera 是唯一支持这个事件的主流浏览器。DOM3 Events 废弃了 DOMFocusIn，推荐 focusin。<br> ❑ DOMFocusOut：当元素失去焦点时触发。这个事件是 blur 的通用版。Opera 是唯一支持这个事件的主流浏览器。DOM3 Events 废弃了 DOMFocusOut，推荐 focusout。<br> ❑ focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。<br> ❑ focusin：当元素获得焦点时触发。这个事件是 focus 的冒泡版。<br> ❑ focusout：当元素失去焦点时触发。这个事件是 blur 的通用版。</p><p>当焦点从页面中的一个元素移到另一个元素上时，会依次发生如下事件。</p><p>（1）focuscout 在失去焦点的元素上触发。<br> （2）focusin 在获得焦点的元素上触发。<br> （3）blur 在失去焦点的元素上触发。<br> （4）DOMFocusOut 在失去焦点的元素上触发。<br> （5）focus 在获得焦点的元素上触发。<br> （6）DOMFocusIn 在获得焦点的元素上触发。</p><h3 id="_17-4-3-鼠标和滚轮事件" tabindex="-1">17.4.3 鼠标和滚轮事件 <a class="header-anchor" href="#_17-4-3-鼠标和滚轮事件" aria-label="Permalink to &quot;17.4.3 鼠标和滚轮事件&quot;">​</a></h3><p>❑ click：在用户单击鼠标主键（通常是左键）或按键盘回车键时触发。这主要是基于无障碍的考虑，让键盘和鼠标都可以触发 onclick 事件处理程序。<br> ❑ dblclick：在用户双击鼠标主键（通常是左键）时触发。这个事件不是在 DOM2Events 中定义的，但得到了很好的支持，DOM3 Events 将其进行了标准化。<br> ❑ mousedown：在用户按下任意鼠标键时触发。这个事件不能通过键盘触发。<br> ❑ mouseenter：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不冒泡，也不会在光标经过后代元素时触发。mouseenter 事件不是在 DOM2Events 中定义的，而是 DOM3 Events 中新增的事件。<br> ❑ mouseleave：在用户把鼠标光标从元素内部移到元素外部时触发。这个事件不冒泡，也不会在光标经过后代元素时触发。mouseleave 事件不是在 DOM2Events 中定义的，而是 DOM3 Events 中新增的事件。<br> ❑ mousemove：在鼠标光标在元素上移动时反复触发。这个事件不能通过键盘触发。<br> ❑ mouseout：在用户把鼠标光标从一个元素移到另一个元素上时触发。移到的元素可以是原始元素的外部元素，也可以是原始元素的子元素。这个事件不能通过键盘触发。<br> ❑ mouseover：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不能通过键盘触发。<br> ❑ mouseup：在用户释放鼠标键时触发。这个事件不能通过键盘触发。</p><p>除了 <code>mouseenter</code> 和 <code>mouseleave</code>，所有鼠标事件都会冒泡，都可以被取消，而这会影响浏览器的默认行为。</p><p>鼠标事件还有一个名为滚轮事件的子类别。滚轮事件只有一个事件 <code>mousewheel</code>，反映的是鼠标滚轮或带滚轮的类似设备上滚轮的交互。</p><h4 id="_1-客户端坐标" tabindex="-1">1．客户端坐标 <a class="header-anchor" href="#_1-客户端坐标" aria-label="Permalink to &quot;1．客户端坐标&quot;">​</a></h4><p>鼠标事件都是在浏览器视口中的某个位置上发生的。这些信息被保存在 <code>event</code> 对象的 <code>clientX</code> 和 <code>clientY</code> 属性中。这两个属性表示事件发生时鼠标光标在视口中的坐标，所有浏览器都支持。</p><h4 id="_2-页面坐标" tabindex="-1">2．页面坐标 <a class="header-anchor" href="#_2-页面坐标" aria-label="Permalink to &quot;2．页面坐标&quot;">​</a></h4><p>客户端坐标是事件发生时鼠标光标在客户端视口中的坐标，而页面坐标是事件发生时鼠标光标在页面上的坐标，通过 <code>event</code> 对象的 <code>pageX</code> 和 <code>pageY</code> 可以获取。这两个属性表示鼠标光标在页面上的位置，因此反映的是光标到页面而非视口左边与上边的距离。</p><h4 id="_3-屏幕坐标" tabindex="-1">3．屏幕坐标 <a class="header-anchor" href="#_3-屏幕坐标" aria-label="Permalink to &quot;3．屏幕坐标&quot;">​</a></h4><p>鼠标事件不仅是在浏览器窗口中发生的，也是在整个屏幕上发生的。可以通过 <code>event</code> 对象的 <code>screenX</code> 和 <code>screenY</code> 属性获取鼠标光标在屏幕上的坐标。</p><h4 id="_4-修饰键" tabindex="-1">4．修饰键 <a class="header-anchor" href="#_4-修饰键" aria-label="Permalink to &quot;4．修饰键&quot;">​</a></h4><p>键盘上的修饰键 Shift、Ctrl、Alt 和 Meta 经常用于修改鼠标事件的行为。DOM 规定了 4 个属性来表示这几个修饰键的状态：shiftKey、ctrlKey、altKey 和 metaKey。这几属性会在各自对应的修饰键被按下时包含布尔值 true，没有被按下时包含 false。在鼠标事件发生的，可以通过这几个属性来检测修饰键是否被按下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.shiftKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shift&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.ctrlKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ctrl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.altKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.metaKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;meta&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Keys: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;, &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="_5-相关元素" tabindex="-1">5．相关元素 <a class="header-anchor" href="#_5-相关元素" aria-label="Permalink to &quot;5．相关元素&quot;">​</a></h4><p>对 <code>mouseover</code> 和 <code>mouseout</code> 事件而言，还存在与事件相关的其他元素。这两个事件都涉及从一个元素的边界之内把光标移到另一个元素的边界之内。对 <code>mouseover</code> 事件来说，事件的主要目标是获得光标的元素，相关元素是失去光标的元素。类似地，对 <code>mouseout</code> 事件来说，事件的主要目标是失去光标的元素，而相关元素是获得光标的元素。</p><p><code>DOM</code> 通过 <code>event</code> 对象的 <code>relatedTarget</code> 属性提供了相关元素的信息。这个属性只有在 <code>mouseover</code> 和 <code>mouseout</code> 事件发生时才包含值，其他所有事件的这个属性的值都是 <code>null</code>。</p><h4 id="_6-鼠标按键" tabindex="-1">6．鼠标按键 <a class="header-anchor" href="#_6-鼠标按键" aria-label="Permalink to &quot;6．鼠标按键&quot;">​</a></h4><p>只有在元素上单击鼠标主键（或按下键盘上的回车键）时 <code>click</code> 事件才会触发，因此按键信息并不是必需的。对 <code>mousedown</code> 和 <code>mouseup</code> 事件来说，<code>event</code> 对象上会有一个 <code>button</code> 属性，表示按下或释放的是哪个按键。<code>DOM</code> 为这个 <code>button</code> 属性定义了 3 个值：0 表示鼠标主键、1 表示鼠标中键（通常也是滚轮键）​、2 表示鼠标副键。</p><h4 id="_7-额外事件信息" tabindex="-1">7．额外事件信息 <a class="header-anchor" href="#_7-额外事件信息" aria-label="Permalink to &quot;7．额外事件信息&quot;">​</a></h4><p>DOM2 Events 规范在 <code>event</code> 对象上提供了 <code>detail</code> 属性，以给出关于事件的更多信息。对鼠标事件来说，<code>detail</code> 包含一个数值，表示在给定位置上发生了多少次单击。单击相当于在同一个像素上发生一次 <code>mousedown</code> 紧跟一次 <code>mouseup</code>。<code>detail</code> 的值从 1 开始，每次单击会加 1。如果鼠标在 <code>mousedown</code> 和 <code>mouseup</code> 之间移动了，则 <code>detail</code> 会重置为 0。</p><h4 id="_8-mousewheel-事件" tabindex="-1">8．mousewheel 事件 <a class="header-anchor" href="#_8-mousewheel-事件" aria-label="Permalink to &quot;8．mousewheel 事件&quot;">​</a></h4><p><code>mousewheel</code> 事件会在用户使用鼠标滚轮时触发，包括在垂直方向上任意滚动。这个事件会在任何元素上触发，并（在 IE8 中）冒泡到 <code>document</code> 和（在所有现代浏览器中）<code>window</code>。<code>mousewheel</code> 事件的 <code>event</code> 对象包含鼠标事件的所有标准信息，此外还有一个名为 <code>wheelDelta</code> 的新属性。当鼠标滚轮向前滚动时，<code>wheelDelta</code> 每次都是+120；而当鼠标滚轮向后滚动时，<code>wheelDelta</code> 每次都是-120</p><h4 id="_9-触摸屏设备" tabindex="-1">9．触摸屏设备 <a class="header-anchor" href="#_9-触摸屏设备" aria-label="Permalink to &quot;9．触摸屏设备&quot;">​</a></h4><p>❑ 不支持 <code>dblclick</code> 事件。双击浏览器窗口可以放大，但没有办法覆盖这个行为。<br> ❑ 单指点触屏幕上的可点击元素会触发 <code>mousemove</code> 事件。如果操作会导致内容变化，则不会再触发其他事件。如果屏幕上没有变化，则会相继触发 <code>mousedown</code>、<code>mouseup</code> 和 <code>click</code> 事件。点触不可点击的元素不会触发事件。可点击元素是指点击时有默认动作的元素（如链接）或指定了 <code>onclick</code> 事件处理程序的元素。<br> ❑ <code>mousemove</code> 事件也会触发 <code>mouseover</code> 和 <code>mouseout</code> 事件。<br> ❑ 双指点触屏幕并滑动导致页面滚动时会触发 <code>mousewheel</code> 和 <code>scroll</code> 事件。</p><h4 id="_10-无障碍问题" tabindex="-1">10．无障碍问题 <a class="header-anchor" href="#_10-无障碍问题" aria-label="Permalink to &quot;10．无障碍问题&quot;">​</a></h4><p>如果 Web 应用或网站必须考虑残障人士，特别是使用屏幕阅读器的用户，那么必须小心使用鼠标事件。如前所述，按回车键可以触发 <code>click</code> 事件，但其他鼠标事件不能通过键盘触发。因此，建议不要使用 <code>click</code> 事件之外的其他鼠标事件向用户提示功能或触发代码执行，这是因为其他鼠标事件会严格妨碍盲人或视障用户使用。以下是几条使用鼠标事件时应该遵循的无障碍建议。</p><p>❑ 使用 <code>click</code> 事件执行代码。有人认为，当使用 <code>onmousedown</code> 执行代码时，应用程序会运行得更快。对视力正常用户来说确实如此。但在屏幕阅读器上，这样会导致代码无法执行，这是因为屏幕阅读器无法触发 <code>mousedown</code> 事件。<br> ❑ 不要使用 <code>mouseover</code> 向用户显示新选项。同样，原因是屏幕阅读器无法触发 <code>mousedown</code> 事件。如果必须要通过这种方式显示新选项，那么可以考虑显示相同信息的键盘快捷键。<br> ❑ 不要使用 <code>dblclick</code> 执行重要的操作，这是因为键盘不能触发这个事件。</p><h3 id="_17-4-4-键盘与输入事件" tabindex="-1">17.4.4 键盘与输入事件 <a class="header-anchor" href="#_17-4-4-键盘与输入事件" aria-label="Permalink to &quot;17.4.4 键盘与输入事件&quot;">​</a></h3><p>❑ keydown，用户按下键盘上某个键时触发，而且持续按住会重复触发。<br> ❑ keypress，用户按下键盘上某个键并产生字符时触发，而且持续按住会重复触发。Esc 键也会触发这个事件。DOM3 Events 废弃了 <code>keypress</code> 事件，而推荐 <code>textInput</code> 事件。<br> ❑ keyup，用户释放键盘上某个键时触发。</p><p>输入事件只有一个，即 <code>textInput</code>。这个事件是对 <code>keypress</code> 事件的扩展，用于在文本显示给用户之前更方便地截获文本输入。<code>textInput</code> 会在文本被插入到文本框之前触发。</p><p>当用户按下键盘上的某个字符键时，首先会触发 <code>keydown</code> 事件，然后触发 <code>keypress</code> 事件，最后触发 <code>keyup</code> 事件。注意，这里 <code>keydown</code> 和 <code>keypress</code> 事件会在文本框出现变化之前触发，而 <code>keyup</code> <code>事件会在文本框出现变化之后触发。如果一个字符键被按住不放，keydown</code> 和 <code>keypress</code> 就会重复触发，直到这个键被释放。</p><p>对于非字符键，在键盘上按一下这个键，会先触发 <code>keydown</code> 事件，然后触发 <code>keyup</code> 事件。如果按住某个非字符键不放，则会重复触发 <code>keydown</code> 事件，直到这个键被释放，此时会触发 <code>keyup</code> 事件。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>键盘事件支持与鼠标事件相同的修饰键。<code>shiftKey</code>、<code>ctrlKey</code>、<code>altKey</code> 和 <code>metaKey</code> 属性在键盘事件中都是可用的。IE8 及更早版本不支持 <code>metaKey</code> 属性。</p></div><p>对于 <code>keydown</code> 和 <code>keyup</code> 事件，<code>event</code> 对象的 <code>keyCode</code> 属性中会保存一个键码，对应键盘上特定的一个键。对于字母和数字键，<code>keyCode</code> 的值与小写字母和数字的 ASCII 编码一致。</p><table tabindex="0"><thead><tr><th>键</th><th style="text-align:center;">键码</th><th style="text-align:center;">键</th><th style="text-align:center;">键码</th><th style="text-align:center;">键</th><th style="text-align:center;">键码</th><th style="text-align:center;">键</th><th style="text-align:center;">键码</th></tr></thead><tbody><tr><td>字母</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">数字键</td><td style="text-align:center;"></td></tr><tr><td>A</td><td style="text-align:center;">65</td><td style="text-align:center;">J</td><td style="text-align:center;">74</td><td style="text-align:center;">S</td><td style="text-align:center;">83</td><td style="text-align:center;">1</td><td style="text-align:center;">49</td></tr><tr><td>B</td><td style="text-align:center;">66</td><td style="text-align:center;">K</td><td style="text-align:center;">75</td><td style="text-align:center;">T</td><td style="text-align:center;">84</td><td style="text-align:center;">2</td><td style="text-align:center;">50</td></tr><tr><td>C</td><td style="text-align:center;">67</td><td style="text-align:center;">L</td><td style="text-align:center;">76</td><td style="text-align:center;">U</td><td style="text-align:center;">85</td><td style="text-align:center;">3</td><td style="text-align:center;">51</td></tr><tr><td>D</td><td style="text-align:center;">68</td><td style="text-align:center;">M</td><td style="text-align:center;">77</td><td style="text-align:center;">V</td><td style="text-align:center;">86</td><td style="text-align:center;">4</td><td style="text-align:center;">52</td></tr><tr><td>E</td><td style="text-align:center;">69</td><td style="text-align:center;">N</td><td style="text-align:center;">78</td><td style="text-align:center;">W</td><td style="text-align:center;">87</td><td style="text-align:center;">5</td><td style="text-align:center;">53</td></tr><tr><td>F</td><td style="text-align:center;">70</td><td style="text-align:center;">O</td><td style="text-align:center;">79</td><td style="text-align:center;">X</td><td style="text-align:center;">88</td><td style="text-align:center;">6</td><td style="text-align:center;">54</td></tr><tr><td>G</td><td style="text-align:center;">71</td><td style="text-align:center;">P</td><td style="text-align:center;">80</td><td style="text-align:center;">Y</td><td style="text-align:center;">89</td><td style="text-align:center;">7</td><td style="text-align:center;">55</td></tr><tr><td>H</td><td style="text-align:center;">72</td><td style="text-align:center;">Q</td><td style="text-align:center;">81</td><td style="text-align:center;">Z</td><td style="text-align:center;">90</td><td style="text-align:center;">8</td><td style="text-align:center;">56</td></tr><tr><td>I</td><td style="text-align:center;">73</td><td style="text-align:center;">R</td><td style="text-align:center;">82</td><td style="text-align:center;">0</td><td style="text-align:center;">48</td><td style="text-align:center;">9</td><td style="text-align:center;">57</td></tr><tr><td>数字键盘</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">功能键</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>0</td><td style="text-align:center;">96</td><td style="text-align:center;">8</td><td style="text-align:center;">104</td><td style="text-align:center;">F1</td><td style="text-align:center;">112</td><td style="text-align:center;">F7</td><td style="text-align:center;">118</td></tr><tr><td>1</td><td style="text-align:center;">97</td><td style="text-align:center;">9</td><td style="text-align:center;">105</td><td style="text-align:center;">F2</td><td style="text-align:center;">113</td><td style="text-align:center;">F8</td><td style="text-align:center;">119</td></tr><tr><td>2</td><td style="text-align:center;">98</td><td style="text-align:center;">*</td><td style="text-align:center;">106</td><td style="text-align:center;">F3</td><td style="text-align:center;">114</td><td style="text-align:center;">F9</td><td style="text-align:center;">120</td></tr><tr><td>3</td><td style="text-align:center;">99</td><td style="text-align:center;">+</td><td style="text-align:center;">107</td><td style="text-align:center;">F4</td><td style="text-align:center;">115</td><td style="text-align:center;">F10</td><td style="text-align:center;">121</td></tr><tr><td>4</td><td style="text-align:center;">100</td><td style="text-align:center;">Enter</td><td style="text-align:center;">108</td><td style="text-align:center;">F5</td><td style="text-align:center;">116</td><td style="text-align:center;">F11</td><td style="text-align:center;">122</td></tr><tr><td>5</td><td style="text-align:center;">101</td><td style="text-align:center;">-</td><td style="text-align:center;">109</td><td style="text-align:center;">F6</td><td style="text-align:center;">117</td><td style="text-align:center;">F12</td><td style="text-align:center;">123</td></tr><tr><td>6</td><td style="text-align:center;">102</td><td style="text-align:center;">.</td><td style="text-align:center;">110</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>7</td><td style="text-align:center;">103</td><td style="text-align:center;">/</td><td style="text-align:center;">111</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>控制键</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td>BackSpace</td><td style="text-align:center;">8</td><td style="text-align:center;">Esc</td><td style="text-align:center;">27</td><td style="text-align:center;">Right Arrow</td><td style="text-align:center;">39</td><td style="text-align:center;">-_</td><td style="text-align:center;">189</td></tr><tr><td>Tab</td><td style="text-align:center;">9</td><td style="text-align:center;">Spacebar</td><td style="text-align:center;">32</td><td style="text-align:center;">Dw Arrow</td><td style="text-align:center;">40</td><td style="text-align:center;">.&gt;</td><td style="text-align:center;">190</td></tr><tr><td>Clear</td><td style="text-align:center;">12</td><td style="text-align:center;">Page Up</td><td style="text-align:center;">33</td><td style="text-align:center;">Insert</td><td style="text-align:center;">45</td><td style="text-align:center;">/?</td><td style="text-align:center;">191</td></tr><tr><td>Enter</td><td style="text-align:center;">13</td><td style="text-align:center;">Page Down</td><td style="text-align:center;">34</td><td style="text-align:center;">Delete</td><td style="text-align:center;">46</td><td style="text-align:center;">\`~</td><td style="text-align:center;">192</td></tr><tr><td>Shift</td><td style="text-align:center;">16</td><td style="text-align:center;">End</td><td style="text-align:center;">35</td><td style="text-align:center;">Num Lock</td><td style="text-align:center;">144</td><td style="text-align:center;">[{</td><td style="text-align:center;">219</td></tr><tr><td>Control</td><td style="text-align:center;">17</td><td style="text-align:center;">Home</td><td style="text-align:center;">36</td><td style="text-align:center;">;:</td><td style="text-align:center;">186</td><td style="text-align:center;">|</td><td style="text-align:center;">220</td></tr><tr><td>Alt</td><td style="text-align:center;">18</td><td style="text-align:center;">Left Arrow</td><td style="text-align:center;">37</td><td style="text-align:center;">=+</td><td style="text-align:center;">187</td><td style="text-align:center;">]}</td><td style="text-align:center;">221</td></tr><tr><td>Cape Lock</td><td style="text-align:center;">20</td><td style="text-align:center;">Up Arrow</td><td style="text-align:center;">38</td><td style="text-align:center;">,&lt;</td><td style="text-align:center;">188</td><td style="text-align:center;">&#39;&quot;</td><td style="text-align:center;">222</td></tr></tbody></table><h4 id="_2-字符编码" tabindex="-1">2．字符编码 <a class="header-anchor" href="#_2-字符编码" aria-label="Permalink to &quot;2．字符编码&quot;">​</a></h4><p>在 <code>keypress</code> 事件发生时，意味着按键会影响屏幕上显示的文本。对插入或移除字符的键，所有浏览器都会触发 <code>keypress</code> 事件，其他键则取决于浏览器。因为 DOM3 Events 规范才刚刚开始实现，所以不同浏览器之间的实现存在显著差异。</p><p>浏览器在 <code>event</code> 对象上支持 <code>charCode</code> 属性，只有发生 <code>keypress</code> 事件时这个属性才会被设置值，包含的是按键字符对应的 ASCII 编码。通常，<code>charCode</code> 属性的值是 0，在 <code>keypress</code> 事件发生时则是对应按键的键码。</p><p>一旦有了字母编码，就可以使用 <code>String.fromCharCode()</code>方法将其转换为实际的字符了。</p><h4 id="_3-dom3-的变化" tabindex="-1">3．DOM3 的变化 <a class="header-anchor" href="#_3-dom3-的变化" aria-label="Permalink to &quot;3．DOM3 的变化&quot;">​</a></h4><p>尽管所有浏览器都实现了某种形式的键盘事件，DOM3 Events 还是做了一些修改。比如，DOM3 Events 规范并未规定 <code>charCode</code> 属性，而是定义了 <code>key</code> 和 <code>char</code> 两个新属性。</p><p>DOM3 Events 也支持一个名为 <code>location</code> 的属性，该属性是一个数值，表示是在哪里按的键。可能的值为：0 是默认键，1 是左边（如左边的 Alt 键）,2 是右边（如右边的 Shift 键）,3 是数字键盘，4 是移动设备（即虚拟键盘）,5 是游戏手柄（如任天堂 Wii 控制器）​。</p><p>最后一个变化是给 <code>event</code> 对象增加了 <code>getModifierState()</code>方法。这个方法接收一个参数，一个等于 <code>Shift</code>、<code>Control</code>、<code>Alt</code>、<code>AltGraph</code> 或 <code>Meta</code> 的字符串，表示要检测的修饰键。如果给定的修饰键处于激活状态（键被按住）​，则方法返回 <code>true</code>，否则返回 <code>false</code>。</p><h4 id="_4-textinput-事件" tabindex="-1">4．textInput 事件 <a class="header-anchor" href="#_4-textinput-事件" aria-label="Permalink to &quot;4．textInput 事件&quot;">​</a></h4><p>DOM3 Events 规范增加了一个名为 <code>textInput</code> 的事件，其在字符被输入到可编辑区域时触发。作为对 <code>keypress</code> 的替代，<code>textInput</code> 事件的行为有些不一样。一个区别是 <code>keypress</code> 会在任何可以获得焦点的元素上触发，而 <code>textInput</code> 只在可编辑区域上触发。另一个区别是 <code>textInput</code> 只在有新字符被插入时才会触发，而 <code>keypress</code> 对任何可能影响文本的键都会触发（包括退格键）​。</p><p>因为 <code>textInput</code> 事件主要关注字符，所以在 <code>event</code> 对象上提供了一个 <code>data</code> 属性，包含要插入的字符（不是字符编码）​。<code>data</code> 的值始终是要被插入的字符。</p><p><code>event</code> 对象上还有一个名为 <code>inputMethod</code> 的属性，该属性表示向控件中输入文本的手段。可能的值如下：</p><p>❑ 0，表示浏览器不能确定是什么输入手段；<br> ❑ 1，表示键盘；<br> ❑ 2，表示粘贴；<br> ❑ 3，表示拖放操作；<br> ❑ 4，表示 IME；<br> ❑ 5，表示表单选项；<br> ❑ 6，表示手写（如使用手写笔）​；<br> ❑ 7，表示语音；<br> ❑ 8，表示组合方式；<br> ❑ 9，表示脚本。</p><h4 id="_5-设备上的键盘事件" tabindex="-1">5．设备上的键盘事件 <a class="header-anchor" href="#_5-设备上的键盘事件" aria-label="Permalink to &quot;5．设备上的键盘事件&quot;">​</a></h4><h3 id="_17-4-5-合成事件" tabindex="-1">17.4.5 合成事件 <a class="header-anchor" href="#_17-4-5-合成事件" aria-label="Permalink to &quot;17.4.5 合成事件&quot;">​</a></h3><p>❑ compositionstart，在 IME 的文本合成系统打开时触发，表示输入即将开始；<br> ❑ compositionupdate，在新字符插入输入字段时触发；<br> ❑ compositionend，在 IME 的文本合成系统关闭时触发，表示恢复正常键盘输入。</p><p>合成事件在很多方面与输入事件很类似。在合成事件触发时，事件目标是接收文本的输入字段。唯一增加的事件属性是 <code>data</code>，其中包含的值视情况而异：</p><p>❑ 在 compositionstart 事件中，包含正在编辑的文本（例如，已经选择了文本但还没替换）​；<br> ❑ 在 compositionupdate 事件中，包含要插入的新字符；<br> ❑ 在 compositionend 事件中，包含本次合成过程中输入的全部内容。</p><details class="details custom-block"><summary>中文输入法导致的高频事件</summary><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oninput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inputEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inputEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionstart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compositionstartEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionstart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, compositionstartEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionupdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compositionupdateEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionupdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, compositionupdateEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compositionendEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compositionend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, compositionendEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></details><h3 id="_17-4-6-变化事件" tabindex="-1">17.4.6 变化事件 <a class="header-anchor" href="#_17-4-6-变化事件" aria-label="Permalink to &quot;17.4.6 变化事件&quot;">​</a></h3><p>DOM2 的变化事件（Mutation Events）是为了在 DOM 发生变化时提供通知。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>这些事件已经被废弃，浏览器已经在有计划地停止对它们的支持。变化事件已经被 Mutation Observers 所取代</p></div><h3 id="_17-4-7-html5-事件" tabindex="-1">17.4.7 HTML5 事件 <a class="header-anchor" href="#_17-4-7-html5-事件" aria-label="Permalink to &quot;17.4.7 HTML5 事件&quot;">​</a></h3><h4 id="_1-contextmenu-事件" tabindex="-1">1．contextmenu 事件 <a class="header-anchor" href="#_1-contextmenu-事件" aria-label="Permalink to &quot;1．contextmenu 事件&quot;">​</a></h4><p><code>contextmenu</code> 事件专门用于表示何时该显示上下文菜单，从而允许开发者取消默认的上下文菜单并提供自定义菜单。<code>contextmenu</code> 事件冒泡，因此只要给 <code>document</code> 指定一个事件处理程序就可以处理页面上的所有同类事件。事件目标是触发操作的元素。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDiv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Right click or Ctrl+click me to get a custom context menu. Click anywhere else to get the default context menu.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myMenu&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;position: absolute; visibility: hidden; background-color: silver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.somewhere.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; somewhere&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.wrox.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Wrox site&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.somewhere-else.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;somewhere-else&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDiv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;contextmenu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> menu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myMenu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      menu.style.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.clientX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      menu.style.top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.clientY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      menu.style.visibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;visible&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myMenu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).style.visibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hidden&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="_2-beforeunload-事件" tabindex="-1">2．beforeunload 事件 <a class="header-anchor" href="#_2-beforeunload-事件" aria-label="Permalink to &quot;2．beforeunload 事件&quot;">​</a></h4><p><code>beforeunload</code> 事件会在页面即将从浏览器中卸载时触发，如果页面需要继续使用，则可以不被卸载。这个事件不能取消，否则就意味着可以把用户永久阻拦在一个页面上。</p><h4 id="_3-domcontentloaded-事件" tabindex="-1">3．DOMContentLoaded 事件 <a class="header-anchor" href="#_3-domcontentloaded-事件" aria-label="Permalink to &quot;3．DOMContentLoaded 事件&quot;">​</a></h4><p><code>window</code> 的 <code>load</code> 事件会在页面完全加载后触发，因为要等待很多外部资源加载完成，所以会花费较长时间。而 <code>DOMContentLoaded</code> 事件会在 <code>DOM</code> 树构建完成后立即触发，而不用等待图片、JavaScript 文件、CSS 文件或其他资源加载完成。相对于 <code>load</code> 事件，<code>DOMContentLoaded</code> 可以让开发者在外部资源下载的同时就能指定事件处理程序，从而让用户能够更快地与页面交互。</p><p>要处理 <code>DOMContentLoaded</code> 事件，需要给 <code>document</code> 或 <code>window</code> 添加事件处理程序（实际的事件目标是 <code>document</code>，但会冒泡到 <code>window</code>）​。</p><p><code>DOMContentLoaded</code> 事件的 <code>event</code> 对象中不包含任何额外信息（除了 <code>target</code> 等于 <code>document</code>）​。</p><p><code>DOMContentLoaded</code> 事件通常用于添加事件处理程序或执行其他 DOM 操作。这个事件始终在 <code>load</code> 事件之前触发。</p><p>对于不支持 <code>DOMContentLoaded</code> 事件的浏览器，可以使用超时为 0 的 <code>setTimeout()</code>函数，通过其回调来设置事件处理程序，比如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里添加事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><details class="details custom-block"><summary>window.onload 和 DOMContentLoaded 的区别</summary><p>都是用来标识 DOM 文档加载完成的事件</p><ol><li>加载时机： <ul><li>window.onload 页面所有 DOM 加载完成后触发</li><li>DOMContentLoaded 在 DOM 树构建完成后触发</li></ul></li><li>事件是否能多次触发： <ul><li>window.onload 不行</li><li>DOMContentLoaded 可以</li></ul></li><li>兼容性 <ul><li>window.onload IE8 以下不支持</li><li>DOMContentLoaded IE9 以上才支持</li></ul></li></ol></details><h4 id="_4-readystatechange-事件" tabindex="-1">4．readystatechange 事件 <a class="header-anchor" href="#_4-readystatechange-事件" aria-label="Permalink to &quot;4．readystatechange 事件&quot;">​</a></h4><p>支持 <code>readystatechange</code> 事件的每个对象都有一个 <code>readyState</code> 属性，该属性具有一个以下列出的可能的字符串值。</p><p>❑ uninitialized：对象存在并尚未初始化。<br> ❑ loading：对象正在加载数据。<br> ❑ loaded：对象已经加载完数据。<br> ❑ interactive：对象可以交互，但尚未加载完成。<br> ❑ complete：对象加载完成。</p><p>并非所有对象都会经历所有 <code>readystate</code> 阶段。文档中说有些对象会完全跳过某个阶段，但并未说明哪些阶段适用于哪些对象。这意味着 <code>readystatechange</code> 事件经常会触发不到 4 次，而 <code>readyState</code> 未必会依次呈现上述值。</p><p>这个事件的 <code>event</code> 对象中没有任何额外的信息，连事件目标都不会设置。在与 <code>load</code> 事件共同使用时，这个事件的触发顺序不能保证。让问题变得更加复杂的是，交互阶段与完成阶段的顺序也不是固定的。在外部资源较多的页面中，很可能交互阶段会早于完成阶段，而在外部资源较少的页面中，很可能完成阶段会早于交互阶段。</p><h4 id="_5-pageshow-与-pagehide-事件" tabindex="-1">5．pageshow 与 pagehide 事件 <a class="header-anchor" href="#_5-pageshow-与-pagehide-事件" aria-label="Permalink to &quot;5．pageshow 与 pagehide 事件&quot;">​</a></h4><p><code>pageshow</code> 会在页面显示时触发。在新加载的页面上，<code>pageshow</code> 会在 <code>load</code> 事件之后触发；在来自往返缓存的页面上，<code>pageshow</code> 会在页面状态完全恢复后触发。注意，虽然这个事件的目标是 <code>document</code>，但事件处理程序必须添加到 <code>window</code> 上。</p><p><code>pageshow</code> 的 <code>event</code> 对象中还包含一个名为 <code>persisted</code> 的属性。这个属性是一个布尔值，如果页面存储在了往返缓存中就是 <code>true</code>，否则就是 <code>false</code>。</p><p><code>pagehide</code> 事件会在页面从浏览器中卸载后，在 <code>unload</code> 事件之前触发。与 <code>pageshow</code> 事件一样，<code>pagehide</code> 事件同样是在 <code>document</code> 上触发，但事件处理程序必须被添加到 <code>window</code>。<code>event</code> 对象中同样包含 <code>persisted</code> 属性，但用法稍有不同，<code>persisted</code> 为 <code>true</code> 表示页面在卸载之后会被保存在往返缓存中。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>注册了 <code>onunload</code> 事件处理程序（即使是空函数）的页面会自动排除在往返缓存之外。这是因为 <code>onunload</code> 事件典型的使用场景是撤销 <code>onload</code> 事件发生时所做的事情，如果使用往返缓存，则下一次页面显示时就不会触发 <code>onload</code> 事件，而这可能导致页面无法使用。</p></div><h4 id="_6-hashchange-事件" tabindex="-1">6．hashchange 事件 <a class="header-anchor" href="#_6-hashchange-事件" aria-label="Permalink to &quot;6．hashchange 事件&quot;">​</a></h4><p><code>hashchange</code> 事件用于在 URL 散列值（URL 最后#后面的部分）发生变化时通知开发者。</p><p><code>onhashchange</code> 事件处理程序必须添加给 <code>window</code>，每次 URL 散列值发生变化时会调用它。event 对象有两个新属性：oldURL 和 newURL。这两个属性分别保存变化前后的 URL，而且是包含散列值的完整 URL。</p><h3 id="_17-4-8-设备事件" tabindex="-1">17.4.8 设备事件 <a class="header-anchor" href="#_17-4-8-设备事件" aria-label="Permalink to &quot;17.4.8 设备事件&quot;">​</a></h3><h4 id="_1-orientationchange-事件-已弃用" tabindex="-1">1．orientationchange 事件(已弃用) <a class="header-anchor" href="#_1-orientationchange-事件-已弃用" aria-label="Permalink to &quot;1．orientationchange 事件(已弃用)&quot;">​</a></h4><p><code>orientationchange</code> 事件在设备的纵横方向改变时触发。</p><h4 id="_2-deviceorientation-事件" tabindex="-1">2．deviceorientation 事件 <a class="header-anchor" href="#_2-deviceorientation-事件" aria-label="Permalink to &quot;2．deviceorientation 事件&quot;">​</a></h4><p><code>deviceorientation</code> 事件在方向传感器输出新数据的时候触发。其数据系传感器与地球坐标系相比较所得，也就是说在设备上可能会采用设备地磁计的数据。</p><p>当 <code>deviceorientation</code> 触发时，<code>event</code> 对象中会包含各个轴相对于设备静置时坐标值的变化，主要是以下 5 个属性。</p><p>❑ alpha:0~360 范围内的浮点值，表示围绕 z 轴旋转时 y 轴的度数（左右转）​。<br> ❑ beta:-180~180 范围内的浮点值，表示围绕 x 轴旋转时 z 轴的度数（前后转）​。<br> ❑ gamma:-90~90 范围内的浮点值，表示围绕 y 轴旋转时 z 轴的度数（扭转）​。<br> ❑ absolute：布尔值，表示设备是否返回绝对值。<br> ❑ compassCalibrated：布尔值，表示设备的指南针是否正确校准。</p><h4 id="_3-devicemotion-事件" tabindex="-1">3．devicemotion 事件 <a class="header-anchor" href="#_3-devicemotion-事件" aria-label="Permalink to &quot;3．devicemotion 事件&quot;">​</a></h4><p><code>DeviceOrientationEvent</code> 规范也定义了 <code>devicemotion</code> 事件。这个事件用于提示设备实际上在移动，而不仅仅是改变了朝向。例如，<code>devicemotion</code> 事件可以用来确定设备正在掉落或者正拿在一个行走的人手里。</p><p>当 devicemotion 事件触发时，event 对象中包含如下额外的属性。</p><p>❑ acceleration：对象，包含 x、y 和 z 属性，反映不考虑重力情况下各个维度的加速信息。<br> ❑ accelerationIncludingGravity：对象，包含 x、y 和 z 属性，反映各个维度的加速信息，包含 z 轴自然重力加速度。<br> ❑ interval：毫秒，距离下次触发 devicemotion 事件的时间。此值在事件之间应为常量。<br> ❑ rotationRate：对象，包含 alpha、beta 和 gamma 属性，表示设备朝向。</p><p>如果无法提供 <code>acceleration</code>、<code>accelerationIncludingGravity</code> 和 <code>rotationRate</code> 信息，则属性值为 <code>null</code>。</p><h3 id="_17-4-9-触摸及手势事件" tabindex="-1">17.4.9 触摸及手势事件 <a class="header-anchor" href="#_17-4-9-触摸及手势事件" aria-label="Permalink to &quot;17.4.9 触摸及手势事件&quot;">​</a></h3><h4 id="_1-触摸事件" tabindex="-1">1．触摸事件 <a class="header-anchor" href="#_1-触摸事件" aria-label="Permalink to &quot;1．触摸事件&quot;">​</a></h4><p>❑ touchstart：手指放到屏幕上时触发（即使有一个手指已经放在了屏幕上）​。<br> ❑ touchmove：手指在屏幕上滑动时连续触发。在这个事件中调用 preventDefault()可以阻止滚动。<br> ❑ touchend：手指从屏幕上移开时触发。<br> ❑ touchcancel：系统停止跟踪触摸时触发。文档中并未明确什么情况下停止跟踪。</p><p>这些事件都会冒泡，也都可以被取消。尽管触摸事件不属于 DOM 规范，但浏览器仍然以兼容 DOM 的方式实现了它们。因此，每个触摸事件的 <code>event</code> 对象都提供了鼠标事件的公共属性：<code>bubbles</code>、<code>cancelable</code>、<code>view</code>、<code>clientX</code>、<code>clientY</code>、<code>screenX</code>、<code>screenY</code>、<code>detail</code>、<code>altKey</code>、<code>shiftKey</code>、<code>ctrlKey</code> 和 <code>metaKey</code>。</p><p>除了这些公共的 <code>DOM</code> 属性，触摸事件还提供了以下 3 个属性用于跟踪触点。</p><p>❑ touches: Touch 对象的数组，表示当前屏幕上的每个触点。<br> ❑ targetTouches: Touch 对象的数组，表示特定于事件目标的触点。<br> ❑ changedTouches: Touch 对象的数组，表示自上次用户动作之后变化的触点。</p><p>每个 <code>Touch</code> 对象都包含下列属性。</p><p>❑ clientX：触点在视口中的 x 坐标。<br> ❑ clientY：触点在视口中的 y 坐标。<br> ❑ identifier：触点 ID。<br> ❑ pageX：触点在页面上的 x 坐标。<br> ❑ pageY：触点在页面上的 y 坐标。<br> ❑ screenX：触点在屏幕上的 x 坐标。<br> ❑ screenY：触点在屏幕上的 y 坐标。<br> ❑ target：触摸事件的事件目标。</p><p>当手指点触屏幕上的元素时，依次会发生如下事件（包括鼠标事件）​：</p><p>（1）touchstart<br> （2）mouseover<br> （3）mousemove（1 次）<br> （4）mousedown<br> （5）mouseup<br> （6）click<br> （7）touchend</p><h4 id="_2-手势事件" tabindex="-1">2．手势事件 <a class="header-anchor" href="#_2-手势事件" aria-label="Permalink to &quot;2．手势事件&quot;">​</a></h4><p>手势事件会在两个手指触碰屏幕且相对距离或旋转角度变化时触发。手势事件有以下 3 种。</p><p>❑ gesturestart：一个手指已经放在屏幕上，再把另一个手指放到屏幕上时触发。<br> ❑ gesturechange：任何一个手指在屏幕上的位置发生变化时触发。<br> ❑ gestureend：其中一个手指离开屏幕时触发。</p><p>触摸事件和手势事件存在一定的关系。当一个手指放在屏幕上时，会触发 <code>touchstart</code> 事件。当另一个手指放到屏幕上时，<code>gesturestart</code> 事件会首先触发，然后紧接着触发这个手指的 <code>touchstart</code> 事件。如果两个手指或其中一个手指移动，则会触发 <code>gesturechange</code> 事件。只要其中一个手指离开屏幕，就会触发 <code>gestureend</code> 事件，紧接着触发该手指的 <code>touchend</code> 事件。</p><p>每个手势事件的 <code>event</code> 对象都包含所有标准的鼠标事件属性，新增的两个 <code>event</code> 对象属性是 <code>rotation</code> 和 <code>scale</code>。<code>rotation</code> 属性表示手指变化旋转的度数，负值表示逆时针旋转，正值表示顺时针旋转（从 0 开始）​。<code>scale</code> 属性表示两指之间距离变化（对捏）的程度。开始时为 1，然后随着距离增大或缩小相应地增大或缩小。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>触摸事件也会返回 <code>rotation</code> 和 <code>scale</code> 属性，但只在两个手指触碰屏幕时才会变化。一般来说，使用两个手指的手势事件比考虑所有交互的触摸事件使用起来更容易一些。</p></div><h3 id="_17-4-10-事件参考" tabindex="-1">17.4.10 事件参考 <a class="header-anchor" href="#_17-4-10-事件参考" aria-label="Permalink to &quot;17.4.10 事件参考&quot;">​</a></h3><h2 id="_17-5-内存与性能" tabindex="-1">17.5 内存与性能 <a class="header-anchor" href="#_17-5-内存与性能" aria-label="Permalink to &quot;17.5 内存与性能&quot;">​</a></h2><h3 id="_17-5-1-事件委托" tabindex="-1">17.5.1 事件委托 <a class="header-anchor" href="#_17-5-1-事件委托" aria-label="Permalink to &quot;17.5.1 事件委托&quot;">​</a></h3><p>事件委托利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件。</p><p>❑ document 对象随时可用，任何时候都可以给它添加事件处理程序（不用等待 DOMContentLoaded 或 load 事件）​。这意味着只要页面渲染出可点击的元素，就可以无延迟地起作用。<br> ❑ 节省花在设置页面事件处理程序上的时间。只指定一个事件处理程序既可以节省 DOM 引用，也可以节省时间。<br> ❑ 减少整个页面所需的内存，提升整体性能。</p><h3 id="_17-5-2-删除事件处理程序" tabindex="-1">17.5.2 删除事件处理程序 <a class="header-anchor" href="#_17-5-2-删除事件处理程序" aria-label="Permalink to &quot;17.5.2 删除事件处理程序&quot;">​</a></h3><p>把事件处理程序指定给元素后，在浏览器代码和负责页面交互的 JavaScript 代码之间就建立了联系。这种联系建立得越多，页面性能就越差。除了通过事件委托来限制这种连接之外，还应该及时删除不用的事件处理程序。很多 Web 应用性能不佳都是由于无用的事件处理程序长驻内存导致的。</p><p>导致这个问题的原因主要有两个。第一个是删除带有事件处理程序的元素。比如通过真正的 <code>DOM</code> 方法 <code>removeChild()</code>或 <code>replaceChild()</code>删除节点。最常见的还是使用 <code>innerHTML</code> 整体替换页面的某一部分。这时候，被 <code>innerHTML</code> 删除的元素上如果有事件处理程序，就不会被垃圾收集程序正常清理。</p><p>另一个可能导致内存中残留引用的问题是页面卸载。同样，IE8 及更早版本在这种情况下有很多问题，不过好像所有浏览器都会受这个问题影响。如果在页面卸载后事件处理程序没有被清理，则它们仍然会残留在内存中。之后，浏览器每次加载和卸载页面（比如通过前进、后退或刷新）​，内存中残留对象的数量都会增加，这是因为事件处理程序不会被回收。</p><p>一般来说，最好在 <code>onunload</code> 事件处理程序中趁页面尚未卸载先删除所有事件处理程序。这时候也能体现使用事件委托的优势，因为事件处理程序很少，所以很容易记住要删除哪些。关于卸载页面时的清理，可以记住一点：<code>onload</code> 事件处理程序中做了什么，最好在 <code>onunload</code> 事件处理程序中恢复。</p><h2 id="_17-6-模拟事件" tabindex="-1">17.6 模拟事件 <a class="header-anchor" href="#_17-6-模拟事件" aria-label="Permalink to &quot;17.6 模拟事件&quot;">​</a></h2><h3 id="_17-6-1-dom-事件模拟" tabindex="-1">17.6.1 DOM 事件模拟 <a class="header-anchor" href="#_17-6-1-dom-事件模拟" aria-label="Permalink to &quot;17.6.1 DOM 事件模拟&quot;">​</a></h3><p>使用 <code>document.createEvent()</code>方法创建一个 event 对象。这个方法接收一个参数，此参数是一个表示要创建事件类型的字符串。在 DOM2 中，所有这些字符串都是英文复数形式，但在 DOM3 中，又把它们改成了英文单数形式。可用的字符串值是以下值之一。</p><p>❑ &quot;UIEvents&quot;（DOM3 中是&quot;UIEvent&quot;）​：通用用户界面事件（鼠标事件和键盘事件都继承自这个事件）​。<br> ❑ &quot;MouseEvents&quot;（DOM3 中是&quot;MouseEvent&quot;）​：通用鼠标事件。<br> ❑ &quot;HTMLEvents&quot;（DOM3 中没有）​：通用 HTML 事件（HTML 事件已经分散到了其他事件大类中）​。</p><p>创建 <code>event</code> 对象之后，需要使用事件相关的信息来初始化。每种类型的 <code>event</code> 对象都有特定的方法，可以使用相应数据来完成初始化。方法的名字并不相同，这取决于调用 <code>createEvent()</code>时传入的参数。</p><p>事件模拟的最后一步是触发事件。为此要使用 <code>dispatchEvent()</code>方法，这个方法存在于所有支持事件的 <code>DOM</code> 节点之上。<code>dispatchEvent()</code>方法接收一个参数，即表示要触发事件的 <code>event</code> 对象。调用 <code>dispatchEvent()</code>方法之后，事件就“转正”了，接着便冒泡并触发事件处理程序执行。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>与 <code>createEvent</code> 一起使用的许多方法（例如 <code>initCustomEvent</code>）已被弃用。请使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="noreferrer">event 构造函数</a>代替。</p></div><h4 id="_1-模拟鼠标事件" tabindex="-1">1．模拟鼠标事件 <a class="header-anchor" href="#_1-模拟鼠标事件" aria-label="Permalink to &quot;1．模拟鼠标事件&quot;">​</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/MouseEvent" target="_blank" rel="noreferrer">MouseEvent()</a></p><h4 id="_2-模拟键盘事件" tabindex="-1">2．模拟键盘事件 <a class="header-anchor" href="#_2-模拟键盘事件" aria-label="Permalink to &quot;2．模拟键盘事件&quot;">​</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/KeyboardEvent" target="_blank" rel="noreferrer">键盘事件 KeyboardEvent()</a></p><h4 id="_3-模拟其他事件" tabindex="-1">3．模拟其他事件 <a class="header-anchor" href="#_3-模拟其他事件" aria-label="Permalink to &quot;3．模拟其他事件&quot;">​</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noreferrer">Event</a></p><h4 id="_4-自定义-dom-事件" tabindex="-1">4．自定义 DOM 事件 <a class="header-anchor" href="#_4-自定义-dom-事件" aria-label="Permalink to &quot;4．自定义 DOM 事件&quot;">​</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="noreferrer">CustomEvent</a></p><h3 id="_17-6-2-ie-事件模拟" tabindex="-1">17.6.2 IE 事件模拟 <a class="header-anchor" href="#_17-6-2-ie-事件模拟" aria-label="Permalink to &quot;17.6.2 IE 事件模拟&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// click事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myBtn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建event对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createEventObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 初始化event对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.screenX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.screenY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.clientX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.clientY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.ctrlKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.altKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.shiftKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fireEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onclick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟keypress事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textbox </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myTextbox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建event对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createEventObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化event对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.altKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.ctrlKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.shiftKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.keyCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">textbox.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fireEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onkeypress&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event)</span></span></code></pre></div>`,228)]))}const o=i(n,[["render",l]]);export{c as __pageData,o as default};
